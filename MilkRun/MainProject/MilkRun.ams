## ams_version=1.0

Model Main_MilkRun {
    Section RawData {
        DeclarationSection RawSet {
            Set S_RawRegion {
                Index: rawReg;
            }
            Set S_RawCity {
                SubsetOf: S_RawLocation;
                Index: rawct;
            }
            Set S_RawCustomer {
                SubsetOf: S_RawLocation;
                Index: rawcust;
            }
            Set S_RawLocalDeliveryId {
                SubsetOf: S_RawLocation;
                Index: rawldid;
            }
            Set S_RawDC {
                SubsetOf: S_RawLocation;
                Index: rawdc;
            }
            Set S_RawLocation {
                Index: rawlc, rawlc1, rawlc2;
                Definition: S_RawCity + S_RawCustomer + S_RawLocalDeliveryId + S_RawDC;
            }
            Set S_RawDCAndLD {
                SubsetOf: S_RawLocation;
                Index: rawdcld;
                Definition: S_RawLocalDeliveryId + S_RawDC;
            }
            Set S_RawDCDivision {
                Index: rawdcd;
            }
            Set S_RawTransportationMode {
                Index: rawtm;
            }
            Set S_RawSKUCategory {
                Index: rawskuc;
            }
            Set S_RawSKU {
                Index: rawsku;
            }
            Set S_RawUnit {
                Index: rawunit;
            }
            Set S_RawTruckType {
                Index: rawtkt;
            }
            Set S_RawTruck {
                Index: rawtk;
            }
            Set S_RawSN {
                SubsetOf: Integers;
                Index: rawsn;
                Definition: {
                    {1..100}
                }
            }
            Set S_RawIndex {
                SubsetOf: Integers;
                Index: rawindex;
                Definition: {
                    {1..100000}
                }
            }
        }
        DeclarationSection RawInput {
            ElementParameter P_RawCityRegion {
                IndexDomain: rawct;
                Range: S_RawRegion;
            }
            Parameter P_RawCustomerLatitude {
                IndexDomain: rawcust;
            }
            Parameter P_RawCustomerLongitude {
                IndexDomain: rawcust;
            }
            ElementParameter P_RawCustomerCity {
                IndexDomain: rawcust;
                Range: S_RawCity;
            }
            StringParameter P_RawCustomerDescription {
                IndexDomain: rawcust;
            }
            Parameter P_RawDayofTimeWindowSN {
                IndexDomain: rawsn;
            }
            Parameter P_RawStartTimeofTimeWindowSN {
                IndexDomain: rawsn;
            }
            Parameter P_RawEndTimeofTimeWindowSN {
                IndexDomain: rawsn;
            }
            Parameter P_RawLocalDeliveryIdLatitude {
                IndexDomain: rawldid;
            }
            Parameter P_RawLocalDeliveryIdLongitude {
                IndexDomain: rawldid;
            }
            ElementParameter P_RawLocalDeliveryCity {
                IndexDomain: rawldid;
                Range: S_RawCity;
            }
            Parameter P_RawDCLatitude {
                IndexDomain: rawdc;
            }
            Parameter P_RawDCLongitude {
                IndexDomain: rawdc;
            }
            Parameter P_RawMaxShipperPerDay {
                IndexDomain: rawdc;
            }
            Parameter P_RawMaxCustomerPerDay {
                IndexDomain: rawdc;
            }
            ElementParameter P_RawDCDescription {
                IndexDomain: rawdc;
                Range: S_RawCity;
            }
            ElementParameter P_RawDCofDCDivision {
                IndexDomain: rawdcd;
                Range: S_RawDC;
            }
            StringParameter P_RawTransportationModeDescription {
                IndexDomain: rawtm;
            }
            StringParameter P_RawSKUCategoryDescription {
                IndexDomain: rawskuc;
            }
            ElementParameter P_RawSKUCategory {
                IndexDomain: rawsku;
                Range: S_RawSKUCategory;
            }
            Parameter P_RawIsPV {
                IndexDomain: rawsku;
            }
            Parameter P_RawMaxOnRoadTime {
                IndexDomain: rawsku;
            }
            Parameter P_RawDCHandlingCapacityConsumptionRate {
                IndexDomain: rawsku;
            }
            StringParameter P_RawSKUDescription {
                IndexDomain: rawsku;
            }
            StringParameter P_RawUnitDescription {
                IndexDomain: rawunit;
            }
            Parameter P_RawConversionRateToShipper {
                IndexDomain: (rawsku,rawunit);
            }
            ElementParameter P_RawTMofTruckType {
                IndexDomain: rawtkt;
                Range: S_RawTransportationMode;
            }
            Parameter P_RawVolumeCapacity {
                IndexDomain: rawtkt;
            }
            Parameter P_RawWeightCapacity {
                IndexDomain: rawtkt;
            }
            Parameter P_RawTravelSpeed {
                IndexDomain: rawtkt;
            }
            Parameter P_RawMaxTravelDay {
                IndexDomain: rawtkt;
            }
            Parameter P_RawMaxCustomerPerTrip {
                IndexDomain: rawtkt;
            }
            Parameter P_RawTransportationCostPerKm {
                IndexDomain: rawtkt;
            }
            Parameter P_RawAdditionalDropoffCostDiffCity {
                IndexDomain: rawtkt;
            }
            Parameter P_RawAdditionalDropoffCostSameCity {
                IndexDomain: rawtkt;
            }
            StringParameter P_RawTruckTypeDescription {
                IndexDomain: rawtkt;
            }
            Parameter P_RawAdditionalDropoffCostLE500 {
                IndexDomain: rawtkt;
            }
            Parameter P_RawAdditionalDropoffCostG500LE1000 {
                IndexDomain: rawtkt;
            }
            Parameter P_RawAdditionalDropoffCostG1000 {
                IndexDomain: rawtkt;
            }
            StringParameter P_RawTruckOwnerId {
                IndexDomain: rawtk;
            }
            ElementParameter P_RawTruckTruckType {
                IndexDomain: rawtk;
                Range: S_RawTruckType;
            }
            Parameter P_RawTruckCity {
                IndexDomain: (rawtk,rawct);
                Range: binary;
            }
            Parameter P_RawDistance {
                IndexDomain: (rawlc1, rawlc2);
            }
            Parameter P_RawWeight {
                IndexDomain: (rawsku,rawtm,rawunit);
            }
            Parameter P_RawVolume {
                IndexDomain: (rawsku,rawtm,rawunit);
            }
            Parameter P_RawLDDayofWeek {
                IndexDomain: (rawldid,rawsn);
            }
            Parameter P_RawLDStartOfTimeWindow {
                IndexDomain: (rawldid,rawsn);
            }
            Parameter P_RawLDEndOfTimeWindow {
                IndexDomain: (rawldid,rawsn);
            }
            ElementParameter P_RawDCDivisionInDCStock {
                IndexDomain: rawindex;
                Range: S_RawDCDivision;
            }
            ElementParameter P_RawSKUInDCStock {
                IndexDomain: rawindex;
                Range: S_RawSKU;
            }
            Parameter P_RawAvailableStock {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawCityInSalesOrderVx {
                IndexDomain: rawindex;
                Range: S_RawCity;
            }
            ElementParameter P_RawRegionInSalesOrderVx {
                IndexDomain: rawindex;
                Range: S_RawRegion;
            }
            StringParameter P_RawStatusInSalesOrderVx {
                IndexDomain: rawindex;
            }
            StringParameter P_RawOrderIdInSalesOrderVx {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawOrderDateInSalesOrderVx {
                IndexDomain: rawindex;
                Range: Cal_Days;
            }
            ElementParameter P_RawCustomerInSalesOrderVx {
                IndexDomain: rawindex;
                Range: S_RawCustomer;
            }
            StringParameter P_RawCustomerNameInSalesOrderVx {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawSKUInSalesOrderVx {
                IndexDomain: rawindex;
                Range: S_RawSKU;
            }
            Parameter P_RawQuantityInSalesOrderVx {
                IndexDomain: rawindex;
            }
            StringParameter P_RawLatestDateInSalesOrderVx {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawLatestDeliveryDateInSalesOrderVx {
                IndexDomain: rawindex;
                Range: Cal_Days;
            }
            StringParameter P_RawDCDivisionStringInSalesOrderVx {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawRxDCInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawDC;
            }
            ElementParameter P_RawRxCustomerInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawCustomer;
            }
            ElementParameter P_RawRxCityInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawCity;
            }
            ElementParameter P_RawRxRegionInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawRegion;
            }
            ElementParameter P_RawRxSKUInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawSKU;
            }
            StringParameter P_RawRxStatusInSalesOrder {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawRxUnitIdInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawUnit;
            }
            Parameter P_RawRxQuantityInSalesOrder {
                IndexDomain: rawindex;
            }
            ElementParameter P_RawRxLocalDeliveryIdInSalesOrder {
                IndexDomain: rawindex;
                Range: S_RawLocalDeliveryId;
            }
            ElementParameter P_RawRxPreferredDeliveryStartDateInSalesOrder {
                IndexDomain: rawindex;
                Range: Cal_Days;
            }
            ElementParameter P_RawRxPreferredDeliveryEndDateInSalesOrder {
                IndexDomain: rawindex;
                Range: Cal_Days;
            }
        }
        Procedure ReadExcelData {
            Body: {
                !!! Read customer data
                FileSelect(
                	filename  :  P_FileName,
                	directory :  ,
                	extension :  ".xlsx",
                	title     :  );
                
                !P_FileName := "Milkrun_Input_Template_v2.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.1.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.2.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.2_TestWithMoreRxorders.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.3.xlsx";
                !P_FileName := "Milkrun_Input_Template_v3.4.xlsx";
                
                empty RawInput;
                empty RawSet;
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Region");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawRegion, Range:dataRangeStr, Mode:'replace');
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Customer City");
                numRows := 1000;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawCity, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCityRegion, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Customer");
                numRows := 10000;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawCustomer, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerLatitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerLongitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerCity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Customer Work Time");
                numRows := 10000;
                rowRangeStr := formatString("B2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDayofTimeWindowSN, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawStartTimeofTimeWindowSN, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawEndTimeofTimeWindowSN, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Local Delivery");
                numRows := 1000;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawLocalDeliveryId, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLocalDeliveryIdLatitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLocalDeliveryIdLongitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLocalDeliveryCity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"DC");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawDC, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCLatitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCLongitude, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawMaxShipperPerDay, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawMaxCustomerPerDay, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("F2:F%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"DC Division");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawDCDivision, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCofDCDivision, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Transportation Mode");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawTransportationMode, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTransportationModeDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"SKU Category");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawSKUCategory, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawSKUCategoryDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"SKU");
                numRows := 1000;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawSKU, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawSKUCategory, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawIsPV, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawMaxOnRoadTime, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCHandlingCapacityConsumptionRate, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("F2:F%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawSKUDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Unit");
                numRows := 100;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawUnit, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawUnitDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"SKU Unit Conversion");
                numRows := 1000;
                rowRangeStr := formatString("A2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawConversionRateToShipper, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Truck Type");
                numRows := 100;
                dataRangeStr := formatString("B2:B%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawTruckType, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("B2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTMofTruckType, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawVolumeCapacity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawWeightCapacity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("F2:F%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTravelSpeed, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("G2:G%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawMaxTravelDay, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("H2:H%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawMaxCustomerPerTrip, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("I2:I%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTransportationCostPerKm, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("J2:J%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAdditionalDropoffCostDiffCity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("K2:K%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAdditionalDropoffCostSameCity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("L2:L%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTruckTypeDescription, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("M2:M%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAdditionalDropoffCostLE500, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("N2:N%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAdditionalDropoffCostG500LE1000, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("O2:O%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAdditionalDropoffCostG1000, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Truck");
                numRows := 1000;
                dataRangeStr := formatString("A2:A%i",numRows);
                SpreadSheet::RetrieveSet(Workbook:P_FileName, Set:S_RawTruck, Range:dataRangeStr, Mode:'replace');
                
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTruckOwnerId, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTruckTruckType, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Truck Allowed City");
                numRows := 50000;
                rowRangeStr := formatString("A2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawTruckCity, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Distance");
                numRows := 50000;
                rowRangeStr := formatString("A2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDistance, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"SKU Volume & Weight");
                numRows := 50000;
                rowRangeStr := formatString("A2:C%i",numRows);
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawWeight, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawVolume, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Local Delivery Time Window");
                numRows := 50000;
                rowRangeStr := formatString("A2:B%i",numRows);
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLDDayofWeek, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLDStartOfTimeWindow, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLDEndOfTimeWindow, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"DC Stock");
                numRows := 1000;
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCDivisionInDCStock, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawSKUInDCStock, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("F2:F%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawAvailableStock, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Sales Order - Vx");
                numRows := 50000;
                rowRangeStr := formatString("A2:A%i",numRows);
                ! Get Vx Order table City information from Customer table instead
                !dataRangeStr := formatString("D2:D%i", numRows);
                !SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCityInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawStatusInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("G2:G%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawOrderIdInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("I2:I%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawOrderDateInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("J2:J%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("K2:K%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawCustomerNameInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("N2:N%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawSKUInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("Q2:Q%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawQuantityInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("AE2:AE%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLatestDateInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("AE2:AE%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawLatestDeliveryDateInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("AF2:AF%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawDCDivisionStringInSalesOrderVx, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                SpreadSheet::SetActiveSheet(Workbook:P_FileName, Name:"Sales Order - Rx");
                numRows := 50000;
                rowRangeStr := formatString("A2:A%i",numRows);
                dataRangeStr := formatString("B2:B%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxDCInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("C2:C%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxCustomerInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("D2:D%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxSKUInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("E2:E%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxStatusInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("F2:F%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxUnitIdInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("G2:G%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxQuantityInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("H2:H%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxLocalDeliveryIdInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("I2:I%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxPreferredDeliveryStartDateInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                dataRangeStr := formatString("J2:J%i", numRows);
                SpreadSheet::RetrieveTable(Workbook:P_FileName, Parameter:P_RawRxPreferredDeliveryEndDateInSalesOrder, DataRange:dataRangeStr, RowsRange:rowRangeStr);
                
                
                
                Spreadsheet::CloseWorkbook(P_FileName, 0);
                
                
                
                P_RawPlanningAtDate := CurrentToTimeSlot(Cal_Days);
                P_RawLocalDeliveryStartDate := CurrentToTimeSlot(Cal_Days);
                
                ! Get Vx Order table City information from Customer table instead
                P_RawCityInSalesOrderVx(rawindex) := P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                
                ! Get Vx Order table Region information from Customer table instead
                P_RawRegionInSalesOrderVx(rawindex) := P_RawCityRegion(P_RawCityInSalesOrderVx(rawindex));
                
                ! Get Rx Order table City and Region information from Customer table
                P_RawRxCityInSalesOrder(rawindex) := P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                P_RawRxRegionInSalesOrder(rawindex) := P_RawCityRegion(P_RawRxCityInSalesOrder(rawindex));
            }
            StringParameter P_FileName;
            Parameter numRows;
            StringParameter dataRangeStr;
            StringParameter rowRangeStr;
            StringParameter columnRangeStr;
        }
        DeclarationSection RawConstant {
            Calendar Cal_Days {
                Index: day, day1, day2;
                Unit: day;
                BeginDate: P_RawCalendarStartDate;
                EndDate: P_RawCalendarEndDate;
                TimeslotFormat: "%m/%d/%c%y";
            }
            Quantity SI_Time_Duration {
                BaseUnit: day;
            }
            StringParameter P_RawCalendarStartDate {
                Definition: "2017-01-02";
            }
            StringParameter P_RawCalendarEndDate {
                Definition: "2026-12-31";
            }
            Parameter P_RawWeekDay {
                IndexDomain: day;
                Definition: {
                    TimeslotCharacteristic(day,'weekday');
                }
            }
        }
        DeclarationSection RawUISetting {
            ElementParameter P_RawSelectedDC {
                Range: S_RawDC;
            }
            ElementParameter P_RawPlanningAtDate {
                Range: Cal_Days;
            }
            ElementParameter P_RawPlanningHorizonStartDate {
                Range: Cal_Days;
            }
            Parameter P_RawPlannningDays;
            Parameter P_RawTruckStartHour {
                InitialData: 17;
            }
            Parameter P_RawOrderDateGapDeliveryStartDate {
                InitialData: 1;
            }
            Parameter P_RawOrderDateGapDeliveryEndDate {
                InitialData: 20;
            }
            ElementParameter P_RawAccountClosingFirstDate {
                Range: Cal_Days;
            }
            ElementParameter P_RawSelectedLocalDeliveryId {
                Range: S_RawLocalDeliveryId;
            }
            ElementParameter P_RawLocalDeliveryStartDate {
                Range: Cal_Days;
            }
            Parameter P_RawLocalDeliveryPlanningDays;
            Parameter P_RawLocalDeliveryTruckStartHour {
                InitialData: 0;
            }
        }
        DeclarationSection RawDefault {
            Parameter P_RawDefaultHandOverTime;
            Parameter P_RawDefaultDCMaxCustomerPerDay;
            Parameter P_RawDefaultTransportationCostPerKM;
            Parameter P_RawDefaultTruckCity;
        }
        DeclarationSection RawDerived {
            Parameter P_RawLatitude {
                IndexDomain: rawlc;
            }
            Parameter P_RawLongitude {
                IndexDomain: rawlc;
            }
            Parameter P_RawDCDivisionAvailableStock {
                IndexDomain: (rawdcd,rawsku);
            }
            Parameter P_RawDCAvailableStock {
                IndexDomain: (rawdc,rawsku);
            }
            Parameter P_RawTruckSpeed {
                IndexDomain: rawtk;
            }
            ElementParameter P_RawDCDivisionInSalesOrderVx {
                IndexDomain: rawindex;
                Range: S_RawDCDivision;
            }
            ElementParameter P_RawEarliestDeliveryDateInSalesOrderVx {
                IndexDomain: rawindex;
                Range: Cal_Days;
            }
        }
        Procedure ProcessRawData {
            Body: {
                !empty RawUISetting;
                empty RawDefault;
                empty RawDerived;
                
                !!! Set UISetting
                !P_RawSelectedDC := 'GZDC';
                !P_RawPlanningAtDate := '9/30/2017';
                P_RawPlannningDays := 5;
                !P_RawTruckStartHour := 17;
                !P_RawOrderDateGapDeliveryStartDate := 1;
                !P_RawOrderDateGapDeliveryEndDate := 20;
                !P_RawAccountClosingFirstDate := '9/11/2017';
                
                !P_RawSelectedLocalDeliveryId := '昆明市';
                !P_RawLocalDeliveryStartDate := '10/26/2017';
                P_RawLocalDeliveryPlanningDays := 2;
                !P_RawLocalDeliveryTruckStartHour := 0;
                
                
                
                !!! Set default values
                P_RawDefaultHandOverTime := 1;
                P_RawDefaultDCMaxCustomerPerDay := 500;
                P_RawDefaultTransportationCostPerKM := 1000;
                P_RawDefaultTruckCity := 1;
                
                
                
                !!! Update missing raw data with default values
                ! P_RawMaxCustomerPerDay(rawdc) data could be 0
                for (rawdc | P_RawMaxCustomerPerDay(rawdc) = 0) do
                	P_RawMaxCustomerPerDay(rawdc) := P_RawDefaultDCMaxCustomerPerDay;
                endfor;
                
                !P_RawTransportationCostPerKm(rawtkt) has one 0
                for (rawtkt | P_RawTransportationCostPerKm(rawtkt) = 0) do
                	P_RawTransportationCostPerKm(rawtkt) := P_RawDefaultTransportationCostPerKM;
                endfor;
                
                !P_RawTruckCity(rawtk, rawct) no record
                P_RawTruckCity(rawtk, rawct) := P_RawDefaultTruckCity;
                
                
                
                !!! Calcualte raw derived
                !P_RawDistance(rawlc1, rawlc2) has 0 data
                for (rawlc | rawlc in S_RawCustomer) do
                	P_RawLatitude(rawlc) := P_RawCustomerLatitude(rawlc);
                	P_RawLongitude(rawlc) := P_RawCustomerLongitude(rawlc);
                endfor;
                
                for (rawlc | rawlc in S_RawLocalDeliveryId) do
                	P_RawLatitude(rawlc) := P_RawLocalDeliveryIdLatitude(rawlc);
                	P_RawLongitude(rawlc) := P_RawLocalDeliveryIdLongitude(rawlc);
                endfor;
                
                for (rawlc | rawlc in S_RawDC) do
                	P_RawLatitude(rawlc) := P_RawDCLatitude(rawlc);
                	P_RawLongitude(rawlc) := P_RawDCLongitude(rawlc);
                endfor;
                
                !!! Time consuming, will calculate at model level
                !for (rawlc1, rawlc2 | P_RawDistance(rawlc1, rawlc2) = 0 and P_RawLatitude(rawlc1) > 0 and P_RawLatitude(rawlc2) > 0 and P_RawLongitude(rawlc1) > 0 and P_RawLongitude(rawlc2) > 0 ) do
                !	CalculateDistance(P_RawLatitude(rawlc1), P_RawLatitude(rawlc2), P_RawLongitude(rawlc1), P_RawLongitude(rawlc2), P_RawDistance(rawlc1, rawlc2));
                !endfor;
                
                !P_RawDCDivisionAvailableStock(rawdcd, rawsku)
                for (rawindex) do
                	P_RawDCDivisionAvailableStock(P_RawDCDivisionInDCStock(rawindex), P_RawSKUInDCStock(rawindex)) := 
                	P_RawDCDivisionAvailableStock(P_RawDCDivisionInDCStock(rawindex), P_RawSKUInDCStock(rawindex)) + P_RawAvailableStock(rawindex);
                endfor;
                P_RawDCAvailableStock(P_RawDCofDCDivision(rawdcd), rawsku) := P_RawDCDivisionAvailableStock(rawdcd, rawsku);
                
                P_RawTruckSpeed(rawtk) := P_RawTravelSpeed(P_RawTruckTruckType(rawtk));
                
                !P_RawDCDivisionStringInSalesOrderVx
                for ((rawindex, rawdcd) | P_RawDCDivisionStringInSalesOrderVx(rawindex) = rawdcd) do
                	P_RawDCDivisionInSalesOrderVx(rawindex) := rawdcd;
                endfor;
                
                P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) := P_RawOrderDateInSalesOrderVx(rawindex) + P_RawOrderDateGapDeliveryStartDate;
                for (rawindex | not (P_RawLatestDeliveryDateInSalesOrderVx(rawindex) in Cal_Days)) do
                	P_RawLatestDeliveryDateInSalesOrderVx(rawindex) := P_RawOrderDateInSalesOrderVx(rawindex) + P_RawOrderDateGapDeliveryEndDate;
                endfor;
                
                !P_RawCustomerInSalesOrderVx
            }
        }
    }
    Section OptimizationModel {
        DeclarationSection ModelSet {
            Set S_Location {
                SubsetOf: S_RawLocation;
                Index: lc, lc1, lc2;
            }
            Set S_Customer {
                SubsetOf: S_Location;
                Index: cs;
            }
            Set S_Truck {
                SubsetOf: S_RawTruck;
                Index: tk;
            }
            Set S_Order {
                SubsetOf: S_RawIndex;
                Index: od;
            }
            Set S_SKU {
                SubsetOf: S_RawSKU;
                Index: SKU;
            }
            Set S_TransportationMode {
                SubsetOf: S_RawTransportationMode;
                Index: tm;
            }
            Set S_City {
                SubsetOf: S_RawCity;
                Index: ct;
            }
            Set S_SN {
                SubsetOf: S_RawSN;
                Index: sn;
            }
        }
        DeclarationSection ModelParameters {
            ElementParameter P_DC {
                Range: S_RawLocation;
            }
            Parameter P_AdditionalDropoffCostDiffCity {
                IndexDomain: tk;
            }
            Parameter P_AdditionalDropoffCostSameCity {
                IndexDomain: tk;
            }
            ElementParameter P_TruckTM {
                IndexDomain: tk;
                Range: S_TransportationMode;
            }
            Parameter P_MaxCustomer {
                IndexDomain: tk;
            }
            Parameter P_MaxTravelDay {
                IndexDomain: tk;
            }
            Parameter P_TruckVolumeCap {
                IndexDomain: tk;
            }
            Parameter P_TruckWeightCap {
                IndexDomain: tk;
            }
            Parameter P_HandOverTime {
                IndexDomain: (tk,cs);
            }
            Parameter P_TruckCity {
                IndexDomain: (tk,ct);
                Range: binary;
            }
            ElementParameter P_CustomerCity {
                IndexDomain: cs;
                Range: S_City;
            }
            ElementParameter P_OrderSKU {
                IndexDomain: od;
                Range: S_SKU;
            }
            Parameter P_SkuMaxiumOnRoadTime {
                IndexDomain: SKU;
            }
            Parameter P_ConversionRateToShipper {
                IndexDomain: SKU;
            }
            Parameter P_DCHandlingCapacityConsumptionRate {
                IndexDomain: SKU;
            }
            Parameter P_SkuTM {
                IndexDomain: (SKU,tm);
                Range: binary;
            }
            Parameter P_VolumePerShipper {
                IndexDomain: (SKU,tm);
            }
            Parameter P_WeightPerShipper {
                IndexDomain: (SKU,tm);
            }
            Parameter P_WeightPerPcs {
                IndexDomain: (SKU,tm);
            }
            Parameter P_DCHandlingShipperCap;
            Parameter P_DCHandlingCustomerCap;
            ElementParameter P_AccountClosingFirstDay {
                Range: Cal_Days;
            }
            ElementParameter P_PlanningHorizonStartDate {
                Range: Cal_Days;
            }
            Parameter P_DayGapStartToAccountClosing;
            Parameter P_BigMInMeetOrder2;
            Parameter P_BigMInDCServeCustomer1;
            Parameter P_BigMInSKUMaxOnRoadTime;
            Parameter P_BigM;
        }
        DeclarationSection ModelParametersDerived {
            Parameter P_TransportationCost {
                IndexDomain: (tk,lc1,lc2) | not lc1 = lc2;
            }
            Parameter P_TransportationTime {
                IndexDomain: (tk,lc1,lc2) | not lc1 = lc2;
            }
            Parameter P_EarliestArrivalTime {
                IndexDomain: od;
            }
            Parameter P_LatestDepartureTime {
                IndexDomain: od;
            }
            Parameter P_DisallowedTimeWindowStart {
                IndexDomain: (cs,sn);
            }
            Parameter P_DisallowedTimeWindowEnd {
                IndexDomain: (cs,sn);
            }
            ElementParameter P_OrderCustomer {
                IndexDomain: od;
                Range: S_Customer;
            }
            Parameter P_OrderShipper {
                IndexDomain: od;
            }
            Parameter P_OrderPcs {
                IndexDomain: od;
            }
            Parameter P_DCAvailableStock {
                IndexDomain: SKU;
            }
            Parameter P_IsSameCity {
                IndexDomain: (lc1, lc2) | (not (lc1 = lc2)) and (not (lc1 = P_DC)) and (not (lc2 = P_DC));
                Range: binary;
            }
        }
        DeclarationSection DecisionVariables {
            Variable V_Travel {
                IndexDomain: (tk,lc1,lc2) | not (lc1 = lc2);
                Range: binary;
            }
            Variable V_DepartureTime {
                IndexDomain: (tk,lc1);
                Range: integer;
            }
            Variable V_AssignOrder {
                IndexDomain: (od,tk) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Range: binary;
            }
            Variable V_AssignOrderShipper {
                IndexDomain: (od, tk) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Range: integer;
            }
            Variable V_AssignOrderNonFullShipper {
                IndexDomain: (od, tk) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Range: binary;
            }
            Variable V_ServeCustomer {
                IndexDomain: (cs, tk) | P_TruckCity(tk, P_CustomerCity(cs)) = 1;
                Range: binary;
            }
            Variable V_DcServeCustomer {
                IndexDomain: cs;
                Range: binary;
            }
            Variable V_IsBeforeDisallowedTimeWindow {
                IndexDomain: (tk, cs, sn);
                Range: binary;
            }
            Variable V_UnMetOrderShipper {
                IndexDomain: od;
                Range: integer;
            }
            Variable V_UnMetOrderNonFullShipper {
                IndexDomain: od;
                Range: integer;
            }
        }
        DeclarationSection ModelConstraints {
            Constraint C_Atmost1NextVisitLocation {
                IndexDomain: (tk, lc1);
                Definition: sum(lc2, V_Travel(tk, lc1, lc2)) <= 1;
            }
            Constraint C_OnlyVistServingCustomers1 {
                IndexDomain: (tk, lc1) | not (lc1 = P_DC);
                Definition: sum(lc2, V_Travel(tk, lc1, lc2)) = V_ServeCustomer(lc1, tk);
            }
            Constraint C_OnlyVistServingCustomers2 {
                IndexDomain: (tk, lc2) | not (lc2 = P_DC);
                Definition: sum(lc1, V_Travel(tk, lc1, lc2)) = V_ServeCustomer(lc2, tk);
            }
            Constraint C_FlowConstraint {
                IndexDomain: (tk,lc1);
                Definition: sum(lc2 | not (lc2 = lc1), V_Travel(tk, lc1, lc2)) = sum(lc2 | not (lc2 = lc1), V_Travel(tk, lc2, lc1));
            }
            Constraint C_DepartureTimeatDC {
                IndexDomain: (tk, lc) | lc = P_DC;
                Definition: V_DepartureTime(tk, lc) = P_DepartureTimeAtDC;
            }
            Constraint C_DepartureTimeConstraint {
                IndexDomain: (tk, lc1, lc2) | (not (lc1 = lc2)) and (not (lc2 = P_DC));
                Definition: V_DepartureTime(tk, lc1) + P_TransportationTime(tk, lc1, lc2) + P_HandOverTime(tk, lc2) - V_DepartureTime(tk, lc2) <= P_BigM * (1 - V_Travel(tk, lc1, lc2));
            }
            Constraint C_BigTimeWindowConstraint1 {
                IndexDomain: (tk, od) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_DepartureTime(tk, P_OrderCustomer(od)) <= P_LatestDepartureTime(od) * V_AssignOrder(od, tk);
            }
            Constraint C_BigTimeWindowConstraint2 {
                IndexDomain: (tk, od) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_DepartureTime(tk, P_OrderCustomer(od)) >= (P_EarliestArrivalTime(od) + P_HandOverTime(tk, P_OrderCustomer(od))) * V_AssignOrder(od, tk);
            }
            Constraint C_InsideBigTimeWindowDisallowedSTWConstraint1 {
                IndexDomain: (tk, cs, sn) | P_DisallowedTimeWindowStart(cs, sn) >= 0 and P_DisallowedTimeWindowEnd(cs, sn) >= 1;
                Definition: {
                    (P_DisallowedTimeWindowEnd(cs, sn) + P_HandOverTime(tk, cs)) * V_ServeCustomer(cs, tk)
                    <= V_DepartureTime(tk, cs) + P_BigM * V_IsBeforeDisallowedTimeWindow(tk, cs, sn)
                }
            }
            Constraint C_InsideBigTimeWindowDisallowedSTWConstraint2 {
                IndexDomain: (tk, cs, sn) | P_DisallowedTimeWindowStart(cs, sn) >= 0 and P_DisallowedTimeWindowEnd(cs, sn) >= 1;
                Definition: V_DepartureTime(tk, cs) <= P_DisallowedTimeWindowStart(cs, sn) * V_ServeCustomer(cs, tk) + P_BigM * (1 - V_IsBeforeDisallowedTimeWindow(tk, cs, sn));
            }
            Constraint C_TruckServerCustomerConstraint1 {
                IndexDomain: (tk, cs, od) | P_OrderCustomer(od) = cs and (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_ServeCustomer(cs, tk) >= V_AssignOrder(od, tk);
            }
            Constraint C_TruckServerCustomerConstraint2 {
                IndexDomain: (tk, cs);
                Definition: V_ServeCustomer(cs, tk) <= sum(od | P_OrderCustomer(od) = cs, V_AssignOrder(od, tk));
            }
            Constraint C_AssignOrderShipperConstraint1 {
                IndexDomain: (tk, od) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_AssignOrderShipper(od, tk) <= P_OrderShipper(od) * V_AssignOrder(od, tk);
            }
            Constraint C_AssignOrderShipperConstraint2 {
                IndexDomain: (tk, od) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_AssignOrderNonFullShipper(od, tk) <= V_AssignOrder(od, tk);
            }
            Constraint C_AssignOrderShipperConstraint3 {
                IndexDomain: (tk, od) | (not P_SkuTM(P_OrderSKU(od), P_TruckTM(tk)) = 0);
                Definition: V_AssignOrderShipper(od, tk) + V_AssignOrderNonFullShipper(od, tk) >= V_AssignOrder(od, tk);
            }
            Constraint C_MeetOrderConstraint1 {
                IndexDomain: od;
                Definition: sum(tk, V_AssignOrderShipper(od, tk)) + V_UnMetOrderShipper(od) = P_OrderShipper(od);
            }
            Constraint C_MeetOrderConstraint2 {
                IndexDomain: od;
                Definition: sum(tk, V_AssignOrderNonFullShipper(od, tk)) + V_UnMetOrderNonFullShipper(od) = ceil(P_OrderPcs(od) / P_BigMInMeetOrder2);
            }
            Constraint C_MaximumCustomerPerTripConstraint {
                IndexDomain: tk;
                Definition: sum(cs, V_ServeCustomer(cs, tk)) <= P_MaxCustomer(tk);
            }
            Constraint C_TruckVolumeCapConstraint {
                IndexDomain: tk;
                Definition: sum(od, P_VolumePerShipper(P_OrderSKU(od), P_TruckTM(tk)) * (V_AssignOrderShipper(od, tk) + V_AssignOrderNonFullShipper(od, tk))) <= P_TruckVolumeCap(tk);
            }
            Constraint C_TruckWeightCapConstraint {
                IndexDomain: tk;
                Definition: {
                    sum(od, (P_WeightPerPcs(P_OrderSKU(od), P_TruckTM(tk)) * P_OrderPcs(od) * V_AssignOrderNonFullShipper(od, tk) + 
                    	P_WeightPerShipper(P_OrderSKU(od), P_TruckTM(tk)) * V_AssignOrderShipper(od, tk))) <= P_TruckWeightCap(tk)
                }
            }
            Constraint C_TruckMaximumTravelDayConstraint {
                IndexDomain: (tk, lc1, lc2) | ((not (lc1 = P_DC)) and lc2 = P_DC);
                Definition: V_DepartureTime(tk, lc1) + P_TransportationTime(tk, lc1, lc2) * V_Travel(tk, lc1 ,lc2) - P_DepartureTimeAtDC <= 24 * P_MaxTravelDay(tk);
            }
            Constraint C_DCAvailableStockConstraint {
                IndexDomain: SKU;
                Definition: sum((tk, od) | P_OrderSKU(od) = SKU, P_ConversionRateToShipper(SKU) * V_AssignOrderShipper(od, tk) + P_OrderPcs(od) * V_AssignOrderNonFullShipper(od, tk)) <= P_DCAvailableStock(SKU);
            }
            Constraint C_DCHandingShipperConstraint {
                Definition: sum((od, tk), (V_AssignOrderShipper(od, tk) + V_AssignOrderNonFullShipper(od, tk)) * P_DCHandlingCapacityConsumptionRate(P_OrderSKU(od))) <= P_DCHandlingShipperCap;
            }
            Constraint C_DCServesCustomerConstraint1 {
                IndexDomain: cs;
                Definition: sum(tk, V_ServeCustomer(cs, tk)) <= P_BigMInDCServeCustomer1 * V_DcServeCustomer(cs);
            }
            Constraint C_DCServesCustomerConstraint2 {
                IndexDomain: cs;
                Definition: sum(tk, V_ServeCustomer(cs, tk)) >= V_DcServeCustomer(cs);
            }
            Constraint C_DCHandingCustomerConstraint {
                Definition: sum(cs, V_DcServeCustomer(cs)) <= P_DCHandlingCustomerCap;
            }
            Constraint C_AccountClosingDayConstraint {
                IndexDomain: (tk, lc1, lc2) | ((not (lc1 = P_DC)) and lc2 = P_DC and P_DayGapStartToAccountClosing >= 1);
                Definition: {
                    !V_DepartureTime(tk, lc1) + P_TransportationTime(tk, lc1, lc2) * V_Travel(tk, lc1, lc2) <= 24 * 6
                    V_DepartureTime(tk, lc1) + P_TransportationTime(tk, lc1, lc2) * V_Travel(tk, lc1, lc2) <= 24 * P_DayGapStartToAccountClosing
                }
            }
            Constraint C_SKUMaximumOnRoadTimeConstraint {
                IndexDomain: (tk, od);
                Definition: {
                    V_DepartureTime(tk, P_OrderCustomer(od)) - P_HandOverTime(tk, P_OrderCustomer(od)) - P_DepartureTimeAtDC - (1 - V_AssignOrder(od, tk)) * P_BigMInSKUMaxOnRoadTime
                     <= P_SkuMaxiumOnRoadTime(P_OrderSKU(od)) * V_AssignOrder(od, tk)
                }
            }
            Constraint C_TestingForceServeCustomer {
                Definition: {
                    V_DcServeCustomer('7003885') = 1;
                }
            }
            Constraint C_SumTransportationCost {
                Definition: V_TotalTransportationCost = sum((tk, lc1, lc2), P_TransportationCost(tk, lc1, lc2) * V_Travel(tk, lc1, lc2));
            }
            Constraint C_SumAdditionalCost {
                Definition: {
                    V_TotalAdditionalCost = sum(tk, sum((lc1, lc2) | (not (lc1 = P_DC)) and (not (lc2 = P_DC)), 
                    				    (P_IsSameCity(lc1, lc2) * P_AdditionalDropoffCostSameCity(tk) + (1 - P_IsSameCity(lc1, lc2)) * P_AdditionalDropoffCostDiffCity(tk))
                    				    * V_Travel(tk ,lc1, lc2)))
                    
                    !V_TotalAdditionalCost = sum(tk, P_AdditionalDropoffCostDiffCity(tk) * (sum(cs, V_ServeCustomer(cs, tk)) - 1))
                }
            }
            Constraint C_SumTotalTimeSpan {
                Definition: {
                    V_TotalTimeSpan = sum((tk, lc1, lc2) | ((not (lc1 = lc2)) and (not (lc1 = P_DC)) and lc2 = P_DC),
                    			V_DepartureTime(tk, lc1) + P_TransportationTime(tk, lc1, lc2) * V_Travel(tk, lc1, lc2))
                }
            }
            Constraint C_SumTotalUnMetOrder {
                Definition: V_TotalUnMetOrder = sum(od, V_UnMetOrderShipper(od) + V_UnMetOrderNonFullShipper(od));
            }
            Constraint C_Objective {
                Definition: {
                    V_Objective = V_TotalTransportationCost + V_TotalAdditionalCost + 0.1 * V_TotalTimeSpan + 100000 * V_TotalUnMetOrder
                    										      ! + 100000000 * V_TotalUnMetOrder
                }
            }
        }
        DeclarationSection ModelObjectives {
            Variable V_TotalTransportationCost {
                Range: free;
            }
            Variable V_TotalAdditionalCost {
                Range: free;
            }
            Variable V_TotalTimeSpan {
                Range: free;
            }
            Variable V_TotalUnMetOrder {
                Range: free;
            }
            Variable V_Objective {
                Range: free;
            }
        }
        DeclarationSection OptiMathModel {
            Set S_Variables {
                SubsetOf: AllVariables;
                Definition: {
                    data {
                    V_Travel
                    , V_DepartureTime
                    , V_AssignOrder
                    , V_AssignOrderShipper
                    , V_AssignOrderNonFullShipper
                    , V_ServeCustomer
                    , V_DcServeCustomer
                    , V_IsBeforeDisallowedTimeWindow
                    , V_UnMetOrderShipper
                    , V_UnMetOrderNonFullShipper
                    , V_TotalTransportationCost
                    , V_TotalAdditionalCost
                    , V_TotalTimeSpan
                    , V_TotalUnMetOrder
                    , V_Objective
                    }
                }
            }
            Set S_Constraints {
                SubsetOf: AllConstraints;
                Definition: {
                    data {
                    C_Atmost1NextVisitLocation
                    , C_OnlyVistServingCustomers1
                    , C_OnlyVistServingCustomers2
                    , C_FlowConstraint
                    , C_DepartureTimeatDC
                    , C_DepartureTimeConstraint
                    , C_BigTimeWindowConstraint1
                    , C_BigTimeWindowConstraint2
                    , C_InsideBigTimeWindowDisallowedSTWConstraint1
                    , C_InsideBigTimeWindowDisallowedSTWConstraint2
                    , C_TruckServerCustomerConstraint1
                    , C_TruckServerCustomerConstraint2
                    , C_AssignOrderShipperConstraint1
                    , C_AssignOrderShipperConstraint2
                    , C_AssignOrderShipperConstraint3
                    , C_MeetOrderConstraint1
                    , C_MeetOrderConstraint2
                    , C_MaximumCustomerPerTripConstraint
                    , C_TruckVolumeCapConstraint
                    , C_TruckWeightCapConstraint
                    , C_TruckMaximumTravelDayConstraint	!
                    , C_DCAvailableStockConstraint
                    , C_DCHandingShipperConstraint
                    , C_DCServesCustomerConstraint1
                    , C_DCServesCustomerConstraint2
                    , C_DCHandingCustomerConstraint
                    , C_AccountClosingDayConstraint	!
                    , C_SKUMaximumOnRoadTimeConstraint	!
                    !, C_TestingForceServeCustomer !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    , C_SumTransportationCost
                    , C_SumAdditionalCost
                    , C_SumTotalTimeSpan
                    , C_SumTotalUnMetOrder
                    , C_Objective
                    }
                }
            }
            MathematicalProgram OptiModel {
                Objective: V_Objective;
                Direction: minimize;
                Constraints: S_Constraints;
                Variables: S_Variables;
                Type: MIP;
            }
            Set S_Constraints_LocalDelivery {
                SubsetOf: AllConstraints;
                Definition: {
                    data {
                    C_Atmost1NextVisitLocation
                    , C_OnlyVistServingCustomers1
                    , C_OnlyVistServingCustomers2
                    , C_FlowConstraint
                    , C_DepartureTimeatDC
                    , C_DepartureTimeConstraint
                    , C_BigTimeWindowConstraint1
                    , C_BigTimeWindowConstraint2
                    , C_InsideBigTimeWindowDisallowedSTWConstraint1
                    , C_InsideBigTimeWindowDisallowedSTWConstraint2
                    , C_TruckServerCustomerConstraint1
                    , C_TruckServerCustomerConstraint2
                    , C_AssignOrderShipperConstraint1
                    , C_AssignOrderShipperConstraint2
                    , C_AssignOrderShipperConstraint3
                    , C_MeetOrderConstraint1
                    , C_MeetOrderConstraint2
                    , C_MaximumCustomerPerTripConstraint
                    , C_TruckVolumeCapConstraint
                    , C_TruckWeightCapConstraint
                    , C_TruckMaximumTravelDayConstraint	!
                    ! not for Local Delivery Model, C_DCAvailableStockConstraint
                    ! not for Local Delivery Model, C_DCHandingShipperConstraint
                    , C_DCServesCustomerConstraint1
                    , C_DCServesCustomerConstraint2
                    ! not for Local Delivery Model, C_DCHandingCustomerConstraint
                    ! not for Local Delivery Model, C_AccountClosingDayConstraint	!
                    , C_SKUMaximumOnRoadTimeConstraint	!
                    , C_SumTransportationCost
                    , C_SumAdditionalCost
                    , C_SumTotalTimeSpan
                    , C_SumTotalUnMetOrder
                    , C_Objective
                    }
                }
            }
            MathematicalProgram OptiModel_LocalDelivery {
                Objective: V_Objective;
                Direction: minimize;
                Constraints: S_Constraints_LocalDelivery;
                Variables: S_Variables;
                Type: MIP;
            }
        }
    }
    Section RunSection {
        Procedure CalculateDistance {
            Arguments: (la1,la2,lon1,lon2,dis);
            Body: {
                dla := Pai*(la1-la2)/180;
                dlon := Pai*(lon1-lon2)/180;
                a := sin(dla/2)*sin(dla/2)+cos(la1*Pai/180)*cos(la2*Pai/180)*sin(dlon/2)*sin(dlon/2);
                c := 2*arctan(sqrt(a)/sqrt(1-a));
                dis := R*c;
            }
            Parameter R {
                InitialData: 6371;
            }
            Parameter c;
            Parameter Pai {
                InitialData: 3.1415926;
            }
            Parameter a;
            Parameter dlon;
            Parameter dla;
            Parameter la1;
            Parameter la2;
            Parameter lon1;
            Parameter lon2;
            Parameter dis;
        }
        DeclarationSection RunParametersCommon {
            StringParameter P_VxFirmOrderStatus;
            StringParameter P_VxFirmOrderStatus2;
            StringParameter P_RxFirmOrderStatus;
            ElementParameter P_PCS {
                Range: S_RawUnit;
            }
            ElementParameter P_SHIPPER {
                Range: S_RawUnit;
            }
            Parameter P_DepartureTimeAtDC;
            Parameter P_WeekDayofStartDate;
            ElementParameter P_UpdatedIndex {
                Range: S_RawIndex;
            }
            ElementParameter P_i {
                Range: S_SN;
            }
            Parameter P_j;
            Parameter P_k;
        }
        DeclarationSection RunParametersForMilkRun {
            ElementParameter P_SelectedDC {
                Range: S_RawDC;
            }
            Parameter P_IsVxOrderInScope {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsVxOrderInModel {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsRxOrderInScope {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsRxOrderInModel {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_UI_SolvingTimeLimit {
                InitialData: 30;
            }
            Parameter P_Actual_SolvingTimeLimit;
        }
        Procedure OrderSelectionMilkRun {
            Body: {
                empty RunParametersCommon;
                empty RunParametersForMilkRun;
                
                P_RawPlanningHorizonStartDate := P_RawPlanningAtDate + 3;
                
                P_VxFirmOrderStatus := '集单已完成；订单已释放待发货';
                P_VxFirmOrderStatus2 := 'Firm';
                P_RxFirmOrderStatus := 'Firm';
                P_PCS := 'PCS';
                P_SHIPPER := 'SHIPPER';
                
                P_UI_SolvingTimeLimit := 30;
                
                ! Select Order - Vx
                for (rawindex | P_RawDCofDCDivision(P_RawDCDivisionInSalesOrderVx(rawindex)) = P_RawSelectedDC
                		!and P_RawOrderDateInSalesOrderVx(rawindex) <= P_RawPlanningHorizonStartDate
                		) do
                		P_IsVxOrderInScope(rawindex) := 1;
                endfor;
                
                for (rawindex | P_RawDCofDCDivision(P_RawDCDivisionInSalesOrderVx(rawindex)) = P_RawSelectedDC
                		and (P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus or P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus2)
                		and P_RawOrderDateInSalesOrderVx(rawindex) < P_RawPlanningHorizonStartDate - P_RawOrderDateGapDeliveryStartDate
                		and P_RawOrderDateInSalesOrderVx(rawindex) > P_RawPlanningHorizonStartDate - P_RawOrderDateGapDeliveryEndDate		
                		and P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) < P_RawPlanningHorizonStartDate + P_RawPlannningDays
                		and P_RawLatestDeliveryDateInSalesOrderVx(rawindex) > P_RawPlanningHorizonStartDate
                		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer ! or (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId))
                		) do
                		P_IsVxOrderInModel(rawindex) := 1;
                endfor;
                
                ! Select Order - Rx
                for (rawindex | P_RawRxDCInSalesOrder(rawindex) = P_RawSelectedDC
                		) do
                		P_IsRxOrderInScope(rawindex) := 1;
                endfor;
                
                for (rawindex | P_RawRxDCInSalesOrder(rawindex) = P_RawSelectedDC
                		and P_RawRxStatusInSalesOrder(rawindex) = P_RxFirmOrderStatus
                		and P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) < P_RawPlanningHorizonStartDate + P_RawPlannningDays
                		and P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) > P_RawPlanningHorizonStartDate
                		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer ! or (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId))
                		) do
                		P_IsRxOrderInModel(rawindex) := 1;
                endfor;
            }
        }
        Procedure ProcessDataMilkRun {
            Body: {
                ProcessRawData;
                
                OrderSelectionMilkRun;
            }
        }
        Procedure PassingRawDataToMilkRunModel {
            Body: {
                empty ModelSet;
                empty ModelParameters;
                empty ModelParametersDerived;
                
                P_SelectedDC := P_RawSelectedDC;
                P_DepartureTimeAtDC := P_RawTruckStartHour;
                P_WeekDayofStartDate := P_RawWeekDay(P_RawPlanningHorizonStartDate);
                
                ! Passing set
                S_Location := S_Location + P_SelectedDC;
                !for (rawindex | P_RawDCofDCDivision(P_RawDCDivisionInSalesOrderVx(rawindex)) = P_SelectedDC
                !		and (P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus or P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus2)
                !		and P_RawOrderDateInSalesOrderVx(rawindex) <= P_RawPlanningHorizonStartDate
                !		and P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) <= P_RawPlanningHorizonStartDate + P_RawPlannningDays
                !		and P_RawLatestDeliveryDateInSalesOrderVx(rawindex) >= P_RawPlanningHorizonStartDate
                !		) do
                for (rawindex | P_IsVxOrderInScope(rawindex) = 1 and P_IsVxOrderInModel(rawindex) = 1
                		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer ! or (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId))
                		) do
                	S_Order := S_Order + rawindex;
                	S_SKU := S_SKU + P_RawSKUInSalesOrderVx(rawindex);
                
                	P_OrderSKU(rawindex) := P_RawSKUInSalesOrderVx(rawindex);
                	P_OrderShipper(rawindex) := floor(P_RawQuantityInSalesOrderVx(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                	P_OrderPcs(rawindex) := mod(P_RawQuantityInSalesOrderVx(rawindex), P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                
                	P_EarliestArrivalTime(rawindex) := (P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) - P_RawPlanningHorizonStartDate) * 24;
                	if (P_EarliestArrivalTime(rawindex) < 0) then
                		P_EarliestArrivalTime(rawindex) := 0;
                	endif;
                
                	P_LatestDepartureTime(rawindex) := (P_RawLatestDeliveryDateInSalesOrderVx(rawindex) - P_RawPlanningHorizonStartDate) * 24 + 24;
                	if (P_LatestDepartureTime(rawindex) < 0) then
                		P_LatestDepartureTime(rawindex) := 0;
                	endif;
                
                	if (not (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId)) then
                		S_Location := S_Location + P_RawCustomerInSalesOrderVx(rawindex);
                		S_Customer := S_Customer + P_RawCustomerInSalesOrderVx(rawindex);
                
                		S_City := S_City + P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                		P_CustomerCity(P_RawCustomerInSalesOrderVx(rawindex)) := P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                
                		P_OrderCustomer(rawindex) := P_RawCustomerInSalesOrderVx(rawindex);
                	else
                		S_Location := S_Location + P_RawCityInSalesOrderVx(rawindex);
                		S_Customer := S_Customer + P_RawCityInSalesOrderVx(rawindex);
                
                		S_City := S_City + P_RawLocalDeliveryCity(P_RawCityInSalesOrderVx(rawindex));
                		P_CustomerCity(P_RawCityInSalesOrderVx(rawindex)) := P_RawLocalDeliveryCity(P_RawCityInSalesOrderVx(rawindex));
                
                		P_OrderCustomer(rawindex) := P_RawCityInSalesOrderVx(rawindex);
                	endif;
                endfor;
                
                !for (rawindex | P_RawRxDCInSalesOrder(rawindex) = P_SelectedDC
                !		and P_RawRxStatusInSalesOrder(rawindex) = P_RxFirmOrderStatus
                !		and P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) <= P_RawPlanningHorizonStartDate + P_RawPlannningDays
                !		and P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) >= P_RawPlanningHorizonStartDate
                !		) do
                for (rawindex | P_IsRxOrderInScope(rawindex) = 1 and P_IsRxOrderInModel(rawindex) = 1
                		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer ! or (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId))
                		) do
                	P_UpdatedIndex := rawindex + card(S_RawIndex) / 2;
                
                	S_Order := S_Order + P_UpdatedIndex;
                	S_SKU := S_SKU + P_RawRxSKUInSalesOrder(rawindex);
                
                	P_OrderSKU(P_UpdatedIndex) := P_RawRxSKUInSalesOrder(rawindex);
                	P_OrderShipper(P_UpdatedIndex) := floor(P_RawRxQuantityInSalesOrder(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                	P_OrderPcs(P_UpdatedIndex) := mod(P_RawRxQuantityInSalesOrder(rawindex), P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                
                	P_EarliestArrivalTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) - P_RawPlanningHorizonStartDate) * 24;
                	if (P_EarliestArrivalTime(P_UpdatedIndex) < 0) then
                		P_EarliestArrivalTime(P_UpdatedIndex) := 0;
                	endif;
                
                	P_LatestDepartureTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) - P_RawPlanningHorizonStartDate) * 24 + 24;
                	if (P_LatestDepartureTime(P_UpdatedIndex) < 0) then
                		P_LatestDepartureTime(P_UpdatedIndex) := 0;
                	endif;
                
                	if (not (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId)) then
                		S_Location := S_Location + P_RawRxCustomerInSalesOrder(rawindex);
                		S_Customer := S_Customer + P_RawRxCustomerInSalesOrder(rawindex);
                
                		S_City := S_City + P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                		P_CustomerCity(P_RawRxCustomerInSalesOrder(rawindex)) := P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                
                		P_OrderCustomer(P_UpdatedIndex) := P_RawRxCustomerInSalesOrder(rawindex);
                	else
                		S_Location := S_Location + P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                		S_Customer := S_Customer + P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                
                		S_City := S_City + P_RawLocalDeliveryCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex));
                		P_CustomerCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex)) := P_RawLocalDeliveryCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex));
                
                		P_OrderCustomer(P_UpdatedIndex) := P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                	endif;
                endfor;
                
                if (card(S_Order) = 0) then
                	dialogMessage("No order passed to milk run model.", "Error Message");
                endif;
                
                !!! Temporary
                !P_EarliestArrivalTime(od) := P_RawTruckStartHour;
                !P_LatestDepartureTime(od) := P_RawTruckStartHour + P_RawPlannningDays * 24;
                
                P_BigMInDCServeCustomer1 := 0;
                for(rawtk | P_RawTruckOwnerId(rawtk) = P_SelectedDC) do
                	S_Truck := S_Truck + rawtk;
                	P_BigMInDCServeCustomer1 := P_BigMInDCServeCustomer1 + 1;
                endfor;
                
                for ((SKU, rawtm, rawunit) | P_RawWeight(SKU, rawtm, rawunit) > 0) do
                	S_TransportationMode := S_TransportationMode + rawtm;
                
                	P_SkuTM(SKU, rawtm) := 1;
                
                	if (rawunit = P_SHIPPER) then 
                		P_WeightPerShipper(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                	endif;
                
                	if (rawunit = P_PCS) then
                		P_WeightPerPcs(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                	endif;
                endfor;
                
                for ((SKU, rawtm, rawunit) | P_RawVolume(SKU, rawtm, rawunit) > 0) do
                	S_TransportationMode := S_TransportationMode + rawtm;
                
                	P_SkuTM(SKU, rawtm) := 1;
                
                	if (rawunit = P_SHIPPER) then 
                		P_VolumePerShipper(SKU, rawtm) := P_RawVolume(SKU, rawtm, rawunit);
                	endif;
                endfor;
                
                S_SN := S_RawSN;
                
                ! Passing parameters
                P_DC := P_SelectedDC;
                
                P_AdditionalDropoffCostDiffCity(tk) := P_RawAdditionalDropoffCostDiffCity(P_RawTruckTruckType(tk));
                P_AdditionalDropoffCostSameCity(tk) := P_RawAdditionalDropoffCostSameCity(P_RawTruckTruckType(tk));
                
                P_TruckTM(tk) := P_RawTMofTruckType(P_RawTruckTruckType(tk));
                
                P_MaxCustomer(tk) := P_RawMaxCustomerPerTrip(P_RawTruckTruckType(tk));
                P_MaxTravelDay(tk) := P_RawMaxTravelDay(P_RawTruckTruckType(tk));
                P_TruckVolumeCap(tk) := P_RawVolumeCapacity(P_RawTruckTruckType(tk));
                P_TruckWeightCap(tk) := P_RawWeightCapacity(P_RawTruckTruckType(tk));
                
                P_HandOverTime(tk, cs) := P_RawDefaultHandOverTime;
                
                P_TruckCity(tk, ct) := P_RawTruckCity(tk, ct);
                
                P_SkuMaxiumOnRoadTime(SKU) := P_RawMaxOnRoadTime(SKU);
                P_ConversionRateToShipper(SKU) := P_RawConversionRateToShipper(SKU, P_PCS);
                P_DCHandlingCapacityConsumptionRate(SKU) := P_RawDCHandlingCapacityConsumptionRate(SKU);
                
                P_DCHandlingShipperCap := P_RawMaxShipperPerDay(P_DC);
                P_DCHandlingCustomerCap := P_RawMaxCustomerPerDay(P_DC);
                
                if (P_RawAccountClosingFirstDate in Cal_Days) then
                	P_AccountClosingFirstDay := P_RawAccountClosingFirstDate;
                endif;
                
                P_PlanningHorizonStartDate := P_RawPlanningHorizonStartDate;
                
                if (P_RawAccountClosingFirstDate in Cal_Days) then
                	P_DayGapStartToAccountClosing := P_AccountClosingFirstDay - P_PlanningHorizonStartDate;
                endif;
                
                P_BigMInMeetOrder2 := 0;
                for (SKU) do
                	if(P_BigMInMeetOrder2 < P_RawConversionRateToShipper(SKU, P_PCS)) then
                		P_BigMInMeetOrder2 := P_RawConversionRateToShipper(SKU, P_PCS);
                	endif;
                endfor;
                P_BigMInMeetOrder2 := 2 * P_BigMInMeetOrder2;
                
                P_BigMInSKUMaxOnRoadTime := 20 * 24;
                P_BigM := 1000000;
                
                ! Passing derived parameters
                for (lc1, lc2 | P_RawDistance(lc1, lc2) = 0 and P_RawLatitude(lc1) > 0 and P_RawLatitude(lc2) > 0 and P_RawLongitude(lc1) > 0 and P_RawLongitude(lc2) > 0 and not (lc1 = lc2)) do
                	CalculateDistance(P_RawLatitude(lc1), P_RawLatitude(lc2), P_RawLongitude(lc1), P_RawLongitude(lc2), P_RawDistance(lc1,lc2));
                endfor;
                
                P_TransportationCost(tk, lc1, lc2) := P_RawDistance(lc1,lc2) * P_RawTransportationCostPerKm(P_RawTruckTruckType(tk));
                P_TransportationCost(tk, lc1, lc2) := round(P_TransportationCost(tk, lc1, lc2), 0);
                P_TransportationTime(tk, lc1, lc2) := ceil(P_RawDistance(lc1,lc2) / P_RawTravelSpeed(P_RawTruckTruckType(tk)));
                
                for (cs | cs in S_RawCustomer) do
                	P_i := 1;
                	P_j := 0;
                	P_k := 1;
                
                	for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = P_WeekDayofStartDate) do
                		P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                		P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn);
                
                		P_i := P_i + 1;
                		P_j := P_RawEndTimeofTimeWindowSN(rawsn);
                	endfor;
                
                	while (P_k <= P_RawPlannningDays) do
                		for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = mod(P_WeekDayofStartDate + P_k, 7)) do
                			P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                			P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn) + 24 * P_k;
                
                			P_i := P_i + 1;
                			P_j := P_RawEndTimeofTimeWindowSN(rawsn) + 24 * P_k;
                		endfor;
                
                		P_k := P_k + 1;
                	endwhile;
                endfor;
                
                for (cs | cs in S_RawLocalDeliveryId) do
                	P_i := 1;
                	P_j := 0;
                	P_k := 1;
                
                	for (rawsn | P_RawLDDayofWeek(cs, rawsn) > 0 and P_RawLDDayofWeek(cs, rawsn) = P_WeekDayofStartDate) do
                		P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                		P_DisallowedTimeWindowEnd(cs, P_i) := P_RawLDStartOfTimeWindow(cs, rawsn);
                
                		P_i := P_i + 1;
                		P_j := P_RawLDEndOfTimeWindow(cs, rawsn);
                	endfor;
                
                	while (P_k <= P_RawPlannningDays) do
                		for (rawsn | P_RawLDDayofWeek(cs, rawsn) > 0 and P_RawLDDayofWeek(cs, rawsn) = mod(P_WeekDayofStartDate + P_k, 7)) do
                			P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                			P_DisallowedTimeWindowEnd(cs, P_i) := P_RawLDStartOfTimeWindow(cs, rawsn) + 24 * P_k;
                
                			P_i := P_i + 1;
                			P_j := P_RawLDEndOfTimeWindow(cs, rawsn) + 24 * P_k;
                		endfor;
                
                		P_k := P_k + 1;
                	endwhile;
                endfor;
                
                P_DCAvailableStock(SKU) := P_RawDCAvailableStock(P_DC, SKU);
                
                for ((lc1, lc2) | (not (lc1 = lc2)) and (not (lc1 = P_DC)) and (not (lc2 = P_DC)) and P_CustomerCity(lc1) = P_CustomerCity(lc2)) do
                	P_IsSameCity(lc1, lc2) := 1;
                endfor;
            }
        }
        Procedure RunMilkRunModel {
            Body: {
                if(pro::DelegateToServer) then
                   return 1;
                endif;
                
                
                
                P_NumberOfOrderInModel := 0;
                for (rawindex | P_IsVxOrderInModel(rawindex) = 1 or P_IsRxOrderInModel(rawindex) = 1) do
                	P_NumberOfOrderInModel := P_NumberOfOrderInModel + 1;
                endfor;
                
                if (P_NumberOfOrderInModel <= 80) then
                	PassingRawDataToMilkRunModel;
                
                	empty DecisionVariables;
                
                	P_Actual_SolvingTimeLimit := P_UI_SolvingTimeLimit;
                	if (P_Actual_SolvingTimeLimit <= 20) then
                		P_Actual_SolvingTimeLimit := 20;
                	endif;
                	OptionSetValue("Time Limit", P_Actual_SolvingTimeLimit * 60);
                
                	solve OptiModel;
                
                	PassMilkRunResult;
                elseif (P_NumberOfOrderInModel > 80) then
                	DecompostionByAngle;
                endif;
            }
        }
        Section DecompostionByAngleSection {
            DeclarationSection DecompostionByAngleParameter {
                Parameter P_NumberOfOrderInModel;
                ElementParameter P_TargetLocation {
                    Range: S_RawLocation;
                }
                Parameter P_Distance1;
                Parameter P_Distance2;
                Parameter P_Pai {
                    InitialData: 3.1415926;
                }
                Parameter P_Angle {
                    IndexDomain: rawindex;
                }
                Parameter P_IsVxOrderInSubModel {
                    IndexDomain: rawindex;
                }
                Parameter P_IsRxOrderInSubModel {
                    IndexDomain: rawindex;
                }
                Parameter P_NumberOfSubModels;
                Parameter P_SubModelOrders;
                Set S_AllInModelOrder {
                    SubsetOf: S_RawIndex;
                    Index: allod;
                }
                Parameter P_AngleLB;
                Parameter P_AngleUB;
                Parameter P_AngleBound;
            }
            DeclarationSection SubModelResult {
                Parameter P_IsUsedTruck {
                    IndexDomain: rawtk;
                }
                Parameter P_SubV_Travel {
                    IndexDomain: (rawtk,rawlc1,rawlc2);
                }
                Parameter P_SubV_DepartureTime {
                    IndexDomain: (rawtk,rawlc1);
                }
                Parameter P_SubV_AssignOrder {
                    IndexDomain: (allod,rawtk);
                }
                Parameter P_SubV_AssignOrderShipper {
                    IndexDomain: (allod,rawtk);
                }
                Parameter P_SubV_AssignOrderNonFullShipper {
                    IndexDomain: (allod,rawtk);
                }
                Parameter P_SubV_ServeCustomer {
                    IndexDomain: (rawlc,rawtk);
                }
                Parameter P_SubV_DcServeCustomer {
                    IndexDomain: rawlc;
                }
                Parameter P_SubV_IsBeforeDisallowedTimeWindow {
                    IndexDomain: (rawtk,rawlc,rawsn);
                }
                Parameter P_SubV_UnMetOrderShipper {
                    IndexDomain: allod;
                }
                Parameter P_SubV_UnMetOrderNonFullShipper {
                    IndexDomain: allod;
                }
                Parameter P_SubV_TotalTransportationCost;
                Parameter P_SubV_TotalAdditionalCost;
                Parameter P_SubV_TotalTimeSpan;
                Parameter P_SubV_TotalUnMetOrder;
                Parameter P_SubV_Objective;
                Parameter P_SubInput_TransportationTime {
                    IndexDomain: (rawtk,rawlc1,rawlc2)| not rawlc1 = rawlc2;
                }
                ElementParameter P_SubInput_OrderCustomer {
                    IndexDomain: allod;
                    Range: S_RawLocation;
                }
                ElementParameter P_SubInput_OrderSKU {
                    IndexDomain: allod;
                    Range: S_RawSKU;
                }
                Parameter P_SubInput_OrderPcs {
                    IndexDomain: allod;
                }
                Parameter P_SubInput_AdditionalDropoffCostDiffCity {
                    IndexDomain: (rawtk);
                }
                Parameter P_SubInput_AdditionalDropoffCostSameCity {
                    IndexDomain: (rawtk);
                }
                Parameter P_SubInput_IsSameCity {
                    IndexDomain: (rawlc1,rawlc2)| (not (rawlc1 = rawlc2)) and (not (rawlc1 = P_RawSelectedDC)) and (not (rawlc2 = P_RawSelectedDC));
                    Range: binary;
                }
            }
            Procedure DecompostionByAngle {
                Body: {
                    CalculateAngle;
                    
                    ClusterOrder;
                }
            }
            Procedure CalculateAngle {
                Body: {
                    empty S_AllInModelOrder;
                    
                    P_Angle(rawindex) := 0;
                    
                    for (rawindex | P_IsVxOrderInScope(rawindex) = 1 and P_IsVxOrderInModel(rawindex) = 1
                    		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer
                    		) do
                    	S_AllInModelOrder := S_AllInModelOrder + rawindex;
                    
                    	if (not (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId)) then
                    		P_TargetLocation := P_RawCustomerInSalesOrderVx(rawindex);
                    	else
                    		P_TargetLocation := P_RawCityInSalesOrderVx(rawindex);
                    	endif;
                    
                    	CalculateDistance(P_RawLatitude(P_TargetLocation), P_RawLatitude(P_RawSelectedDC), P_RawLongitude(P_TargetLocation), P_RawLongitude(P_TargetLocation), P_Distance1);
                    	CalculateDistance(P_RawLatitude(P_TargetLocation), P_RawLatitude(P_RawSelectedDC), P_RawLongitude(P_TargetLocation), P_RawLongitude(P_RawSelectedDC), P_Distance2);
                    
                    	P_Angle(rawindex) := arcsin(P_Distance1/P_Distance2) * 180 / P_Pai;
                    
                    	if (P_RawLatitude(P_TargetLocation) >= P_RawLatitude(P_RawSelectedDC)) then		
                    		if (P_RawLongitude(P_TargetLocation) <= P_RawLongitude(P_RawSelectedDC)) then
                    			!P_Degree(rawindex) := arcsin(P_Distance1/P_Distance2) * 180 / P_Pai;
                    		else
                    			P_Angle(rawindex) := 180 - P_Angle(rawindex);
                    		endif;
                    	else
                    		if (P_RawLongitude(P_TargetLocation) >= P_RawLongitude(P_RawSelectedDC)) then
                    			P_Angle(rawindex) := 180 + P_Angle(rawindex);
                    		else
                    			P_Angle(rawindex) := 360 - P_Angle(rawindex);
                    		endif;
                    	endif;
                    endfor;
                    
                    for (rawindex | P_IsRxOrderInScope(rawindex) = 1 and P_IsRxOrderInModel(rawindex) = 1
                    		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer
                    		) do
                    	P_UpdatedIndex := rawindex + card(S_RawIndex) / 2;
                    
                    	S_AllInModelOrder := S_AllInModelOrder + P_UpdatedIndex;
                    
                    	if (not (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId)) then
                    		P_TargetLocation := P_RawRxCustomerInSalesOrder(rawindex);
                    	else
                    		P_TargetLocation := P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                    	endif;
                    
                    	CalculateDistance(P_RawLatitude(P_TargetLocation), P_RawLatitude(P_RawSelectedDC), P_RawLongitude(P_TargetLocation), P_RawLongitude(P_TargetLocation), P_Distance1);
                    	CalculateDistance(P_RawLatitude(P_TargetLocation), P_RawLatitude(P_RawSelectedDC), P_RawLongitude(P_TargetLocation), P_RawLongitude(P_RawSelectedDC), P_Distance2);
                    
                    	P_Angle(P_UpdatedIndex) := arcsin(P_Distance1/P_Distance2) * 180 / P_Pai;
                    
                    	if (P_RawLatitude(P_TargetLocation) >= P_RawLatitude(P_RawSelectedDC)) then		
                    		if (P_RawLongitude(P_TargetLocation) <= P_RawLongitude(P_RawSelectedDC)) then
                    			!P_Degree(rawindex) := arcsin(P_Distance1/P_Distance2) * 180 / P_Pai;
                    		else
                    			P_Angle(P_UpdatedIndex) := 180 - P_Angle(P_UpdatedIndex);
                    		endif;
                    	else
                    		if (P_RawLongitude(P_TargetLocation) >= P_RawLongitude(P_RawSelectedDC)) then
                    			P_Angle(P_UpdatedIndex) := 180 + P_Angle(P_UpdatedIndex);
                    		else
                    			P_Angle(P_UpdatedIndex) := 360 - P_Angle(P_UpdatedIndex);
                    		endif;
                    	endif;
                    endfor;
                }
            }
            Procedure ClusterOrder {
                Body: {
                    empty SubModelResult;
                    
                    P_IsVxOrderInSubModel(rawindex) := 0;
                    P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    P_NumberOfSubModels := 0;
                    
                    P_Actual_SolvingTimeLimit := P_UI_SolvingTimeLimit;
                    if (P_Actual_SolvingTimeLimit <= 20) then
                    	P_Actual_SolvingTimeLimit := 20;
                    endif;
                    
                    !P_Actual_SolvingTimeLimit := 5;
                    !P_NumberOfSubModels := 5;
                    
                    !if (P_RawSelectedDC = 'GZDC') then
                    !	P_NumberOfSubModels := P_NumberOfOrderInModel/50;
                    !	P_AngleLB := 0;
                    !	P_AngleUB := 360;
                    !	P_AngleBound := 0;
                    !	
                    !	! SubModel
                    !	while (P_NumberOfSubModels < 4) do
                    !		if (P_NumberOfSubModels = 0) then
                    !			P_AngleLB := 0;
                    !			P_AngleUB := 120;
                    !		endif;		
                    !		P_NumberOfSubModels := P_NumberOfSubModels + 1;
                    !
                    !		P_IsVxOrderInSubModel(rawindex) := 0;
                    !		P_IsRxOrderInSubModel(rawindex) := 0;
                    !
                    !		for (rawindex | P_Angle(rawindex) >= P_AngleLB and P_Angle(rawindex) < P_AngleUB) do
                    !			if (rawindex <= card(S_RawIndex) / 2) then
                    !				P_IsVxOrderInSubModel(rawindex) := 1;
                    !			else
                    !				P_IsRxOrderInSubModel(rawindex) := 1;
                    !			endif;
                    !		endfor;
                    !
                    !		PassingRawDataToMilkRunSubModel;
                    !
                    !		empty DecisionVariables;
                    !		OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    !		solve OptiModel;
                    !
                    !		SaveSubModelResult;
                    !	endwhile;
                    !
                    !	PassMilkRunResultAggregate;
                    !endif;
                    
                    if (P_RawSelectedDC = 'GZDC') then
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 0 and P_Angle(rawindex) < 40) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 40 and P_Angle(rawindex) < 60) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 60 and P_Angle(rawindex) < 80) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 80 and P_Angle(rawindex) < 90) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 90 and P_Angle(rawindex) < 120) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 120 and P_Angle(rawindex) < 180) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    	! SubModel
                    	P_IsVxOrderInSubModel(rawindex) := 0;
                    	P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    	for (rawindex | P_Angle(rawindex) >= 180 and P_Angle(rawindex) < 360) do
                    		if (rawindex <= card(S_RawIndex) / 2) then
                    			P_IsVxOrderInSubModel(rawindex) := 1;
                    		else
                    			P_IsRxOrderInSubModel(rawindex) := 1;
                    		endif;
                    	endfor;
                    
                    	PassingRawDataToMilkRunSubModel;
                    
                    	empty DecisionVariables;
                    	OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    	solve OptiModel;
                    
                    	SaveSubModelResult;
                    
                    
                    
                    	PassMilkRunResultAggregate;
                    endif;
                    
                    if (P_RawSelectedDC = 'BJDC' or P_RawSelectedDC = 'SYDC') then
                    	P_NumberOfSubModels := 0;
                    	P_AngleLB := 0;
                    	P_AngleUB := 360;
                    
                    	! SubModel
                    	while (P_NumberOfSubModels < 3) do
                    		if (P_NumberOfSubModels = 0) then
                    			P_AngleLB := 0;
                    			P_AngleUB := 180;
                    		endif;		
                    		if (P_NumberOfSubModels = 1) then
                    			P_AngleLB := 180;
                    			P_AngleUB := 300;
                    		endif;		
                    		if (P_NumberOfSubModels = 2) then
                    			P_AngleLB := 300;
                    			P_AngleUB := 360;
                    		endif;		
                    		P_NumberOfSubModels := P_NumberOfSubModels + 1;
                    
                    		P_IsVxOrderInSubModel(rawindex) := 0;
                    		P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    		for (rawindex | P_Angle(rawindex) >= P_AngleLB and P_Angle(rawindex) < P_AngleUB) do
                    			if (rawindex <= card(S_RawIndex) / 2) then
                    				P_IsVxOrderInSubModel(rawindex) := 1;
                    			else
                    				P_IsRxOrderInSubModel(rawindex) := 1;
                    			endif;
                    		endfor;
                    
                    		PassingRawDataToMilkRunSubModel;
                    
                    		empty DecisionVariables;
                    		OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    		solve OptiModel;
                    
                    		SaveSubModelResult;
                    	endwhile;
                    
                    	PassMilkRunResultAggregate;
                    endif;
                    
                    if (P_RawSelectedDC = 'HZDC') then
                    	P_NumberOfSubModels := 0;
                    	P_AngleLB := 0;
                    	P_AngleUB := 360;
                    
                    	! SubModel
                    	while (P_NumberOfSubModels < 4) do
                    		if (P_NumberOfSubModels = 0) then
                    			P_AngleLB := 0;
                    			P_AngleUB := 60;
                    		endif;		
                    		if (P_NumberOfSubModels = 1) then
                    			P_AngleLB := 60;
                    			P_AngleUB := 180;
                    		endif;		
                    		if (P_NumberOfSubModels = 2) then
                    			P_AngleLB := 180;
                    			P_AngleUB := 300;
                    		endif;
                    		if (P_NumberOfSubModels = 3) then
                    			P_AngleLB := 300;
                    			P_AngleUB := 360;
                    		endif;	
                    		P_NumberOfSubModels := P_NumberOfSubModels + 1;
                    
                    		P_IsVxOrderInSubModel(rawindex) := 0;
                    		P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    		for (rawindex | P_Angle(rawindex) >= P_AngleLB and P_Angle(rawindex) < P_AngleUB) do
                    			if (rawindex <= card(S_RawIndex) / 2) then
                    				P_IsVxOrderInSubModel(rawindex) := 1;
                    			else
                    				P_IsRxOrderInSubModel(rawindex) := 1;
                    			endif;
                    		endfor;
                    
                    		PassingRawDataToMilkRunSubModel;
                    
                    		empty DecisionVariables;
                    		OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    		solve OptiModel;
                    
                    		SaveSubModelResult;
                    	endwhile;
                    
                    	PassMilkRunResultAggregate;
                    endif;
                    
                    if (P_RawSelectedDC = 'CDDC') then
                    	P_NumberOfSubModels := 0;
                    	P_AngleLB := 0;
                    	P_AngleUB := 360;
                    
                    	! SubModel
                    	while (P_NumberOfSubModels < 4) do
                    		if (P_NumberOfSubModels = 0) then
                    			P_AngleLB := 0;
                    			P_AngleUB := 120;
                    		endif;		
                    		if (P_NumberOfSubModels = 1) then
                    			P_AngleLB := 120;
                    			P_AngleUB := 180;
                    		endif;		
                    		if (P_NumberOfSubModels = 2) then
                    			P_AngleLB := 180;
                    			P_AngleUB := 210;
                    		endif;
                    		if (P_NumberOfSubModels = 3) then
                    			P_AngleLB := 210;
                    			P_AngleUB := 360;
                    		endif;	
                    		P_NumberOfSubModels := P_NumberOfSubModels + 1;
                    
                    		P_IsVxOrderInSubModel(rawindex) := 0;
                    		P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    		for (rawindex | P_Angle(rawindex) >= P_AngleLB and P_Angle(rawindex) < P_AngleUB) do
                    			if (rawindex <= card(S_RawIndex) / 2) then
                    				P_IsVxOrderInSubModel(rawindex) := 1;
                    			else
                    				P_IsRxOrderInSubModel(rawindex) := 1;
                    			endif;
                    		endfor;
                    
                    		PassingRawDataToMilkRunSubModel;
                    
                    		empty DecisionVariables;
                    		OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    		solve OptiModel;
                    
                    		SaveSubModelResult;
                    	endwhile;
                    
                    	PassMilkRunResultAggregate;
                    endif;
                    
                    if (P_RawSelectedDC = 'XADC') then
                    	P_NumberOfSubModels := 0;
                    	P_AngleLB := 0;
                    	P_AngleUB := 360;
                    
                    	! SubModel
                    	while (P_NumberOfSubModels < 4) do
                    		if (P_NumberOfSubModels = 0) then
                    			P_AngleLB := 0;
                    			P_AngleUB := 120;
                    		endif;		
                    		if (P_NumberOfSubModels = 1) then
                    			P_AngleLB := 120;
                    			P_AngleUB := 210;
                    		endif;		
                    		if (P_NumberOfSubModels = 2) then
                    			P_AngleLB := 210;
                    			P_AngleUB := 270;
                    		endif;
                    		if (P_NumberOfSubModels = 3) then
                    			P_AngleLB := 270;
                    			P_AngleUB := 360;
                    		endif;	
                    		P_NumberOfSubModels := P_NumberOfSubModels + 1;
                    
                    		P_IsVxOrderInSubModel(rawindex) := 0;
                    		P_IsRxOrderInSubModel(rawindex) := 0;
                    
                    		for (rawindex | P_Angle(rawindex) >= P_AngleLB and P_Angle(rawindex) < P_AngleUB) do
                    			if (rawindex <= card(S_RawIndex) / 2) then
                    				P_IsVxOrderInSubModel(rawindex) := 1;
                    			else
                    				P_IsRxOrderInSubModel(rawindex) := 1;
                    			endif;
                    		endfor;
                    
                    		PassingRawDataToMilkRunSubModel;
                    
                    		empty DecisionVariables;
                    		OptionSetValue("Time Limit", ceil(P_Actual_SolvingTimeLimit * 60 * P_SubModelOrders/P_NumberOfOrderInModel));
                    		solve OptiModel;
                    
                    		SaveSubModelResult;
                    	endwhile;
                    
                    	PassMilkRunResultAggregate;
                    endif;
                }
            }
            Procedure PassingRawDataToMilkRunSubModel {
                Body: {
                    empty ModelSet;
                    empty ModelParameters;
                    empty ModelParametersDerived;
                    
                    P_SelectedDC := P_RawSelectedDC;
                    P_DepartureTimeAtDC := P_RawTruckStartHour;
                    P_WeekDayofStartDate := P_RawWeekDay(P_RawPlanningHorizonStartDate);
                    
                    P_SubModelOrders := 0;
                    
                    ! Passing set
                    S_Location := S_Location + P_SelectedDC;
                    !for (rawindex | P_RawDCofDCDivision(P_RawDCDivisionInSalesOrderVx(rawindex)) = P_SelectedDC
                    !		and (P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus or P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus2)
                    !		and P_RawOrderDateInSalesOrderVx(rawindex) <= P_RawPlanningHorizonStartDate
                    !		and P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) <= P_RawPlanningHorizonStartDate + P_RawPlannningDays
                    !		and P_RawLatestDeliveryDateInSalesOrderVx(rawindex) >= P_RawPlanningHorizonStartDate
                    !		) do
                    for (rawindex | P_IsVxOrderInScope(rawindex) = 1 and P_IsVxOrderInModel(rawindex) = 1
                    		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer ! or (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId))
                    		and P_IsVxOrderInSubModel(rawindex) = 1
                    		) do
                    	S_Order := S_Order + rawindex;
                    	P_SubModelOrders := P_SubModelOrders + 1;
                    
                    	S_SKU := S_SKU + P_RawSKUInSalesOrderVx(rawindex);
                    
                    	P_OrderSKU(rawindex) := P_RawSKUInSalesOrderVx(rawindex);
                    	P_OrderShipper(rawindex) := floor(P_RawQuantityInSalesOrderVx(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                    	P_OrderPcs(rawindex) := mod(P_RawQuantityInSalesOrderVx(rawindex), P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                    
                    	P_EarliestArrivalTime(rawindex) := (P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) - P_RawPlanningHorizonStartDate) * 24;
                    	if (P_EarliestArrivalTime(rawindex) < 0) then
                    		P_EarliestArrivalTime(rawindex) := 0;
                    	endif;
                    
                    	P_LatestDepartureTime(rawindex) := (P_RawLatestDeliveryDateInSalesOrderVx(rawindex) - P_RawPlanningHorizonStartDate) * 24 + 24;
                    	if (P_LatestDepartureTime(rawindex) < 0) then
                    		P_LatestDepartureTime(rawindex) := 0;
                    	endif;
                    
                    	if (not (P_RawCityInSalesOrderVx(rawindex) in S_RawLocalDeliveryId)) then
                    		S_Location := S_Location + P_RawCustomerInSalesOrderVx(rawindex);
                    		S_Customer := S_Customer + P_RawCustomerInSalesOrderVx(rawindex);
                    
                    		S_City := S_City + P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                    		P_CustomerCity(P_RawCustomerInSalesOrderVx(rawindex)) := P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                    
                    		P_OrderCustomer(rawindex) := P_RawCustomerInSalesOrderVx(rawindex);
                    	else
                    		S_Location := S_Location + P_RawCityInSalesOrderVx(rawindex);
                    		S_Customer := S_Customer + P_RawCityInSalesOrderVx(rawindex);
                    
                    		S_City := S_City + P_RawLocalDeliveryCity(P_RawCityInSalesOrderVx(rawindex));
                    		P_CustomerCity(P_RawCityInSalesOrderVx(rawindex)) := P_RawLocalDeliveryCity(P_RawCityInSalesOrderVx(rawindex));
                    
                    		P_OrderCustomer(rawindex) := P_RawCityInSalesOrderVx(rawindex);
                    	endif;
                    endfor;
                    
                    !for (rawindex | P_RawRxDCInSalesOrder(rawindex) = P_SelectedDC
                    !		and P_RawRxStatusInSalesOrder(rawindex) = P_RxFirmOrderStatus
                    !		and P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) <= P_RawPlanningHorizonStartDate + P_RawPlannningDays
                    !		and P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) >= P_RawPlanningHorizonStartDate
                    !		) do
                    for (rawindex | P_IsRxOrderInScope(rawindex) = 1 and P_IsRxOrderInModel(rawindex) = 1
                    		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer ! or (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId))
                    		and P_IsRxOrderInSubModel(rawindex + card(S_RawIndex) / 2) = 1
                    		) do
                    	P_UpdatedIndex := rawindex + card(S_RawIndex) / 2;
                    
                    	S_Order := S_Order + P_UpdatedIndex;
                    	P_SubModelOrders := P_SubModelOrders + 1;
                    
                    	S_SKU := S_SKU + P_RawRxSKUInSalesOrder(rawindex);
                    
                    	P_OrderSKU(P_UpdatedIndex) := P_RawRxSKUInSalesOrder(rawindex);
                    	P_OrderShipper(P_UpdatedIndex) := floor(P_RawRxQuantityInSalesOrder(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                    	P_OrderPcs(P_UpdatedIndex) := mod(P_RawRxQuantityInSalesOrder(rawindex), P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                    
                    	P_EarliestArrivalTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) - P_RawPlanningHorizonStartDate) * 24;
                    	if (P_EarliestArrivalTime(P_UpdatedIndex) < 0) then
                    		P_EarliestArrivalTime(P_UpdatedIndex) := 0;
                    	endif;
                    
                    	P_LatestDepartureTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) - P_RawPlanningHorizonStartDate) * 24 + 24;
                    	if (P_LatestDepartureTime(P_UpdatedIndex) < 0) then
                    		P_LatestDepartureTime(P_UpdatedIndex) := 0;
                    	endif;
                    
                    	if (not (P_RawRxLocalDeliveryIdInSalesOrder(rawindex) in S_RawLocalDeliveryId)) then
                    		S_Location := S_Location + P_RawRxCustomerInSalesOrder(rawindex);
                    		S_Customer := S_Customer + P_RawRxCustomerInSalesOrder(rawindex);
                    
                    		S_City := S_City + P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                    		P_CustomerCity(P_RawRxCustomerInSalesOrder(rawindex)) := P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                    
                    		P_OrderCustomer(P_UpdatedIndex) := P_RawRxCustomerInSalesOrder(rawindex);
                    	else
                    		S_Location := S_Location + P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                    		S_Customer := S_Customer + P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                    
                    		S_City := S_City + P_RawLocalDeliveryCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex));
                    		P_CustomerCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex)) := P_RawLocalDeliveryCity(P_RawRxLocalDeliveryIdInSalesOrder(rawindex));
                    
                    		P_OrderCustomer(P_UpdatedIndex) := P_RawRxLocalDeliveryIdInSalesOrder(rawindex);
                    	endif;
                    endfor;
                    
                    if (card(S_Order) = 0) then
                    	dialogMessage("No order passed to milk run sub model.", "Warnning Message");
                    endif;
                    
                    !!! Temporary
                    !P_EarliestArrivalTime(od) := P_RawTruckStartHour;
                    !P_LatestDepartureTime(od) := P_RawTruckStartHour + P_RawPlannningDays * 24;
                    
                    P_BigMInDCServeCustomer1 := 0;
                    for(rawtk | P_RawTruckOwnerId(rawtk) = P_SelectedDC and P_IsUsedTruck(rawtk) = 0) do
                    	S_Truck := S_Truck + rawtk;
                    	P_BigMInDCServeCustomer1 := P_BigMInDCServeCustomer1 + 1;
                    endfor;
                    
                    for ((SKU, rawtm, rawunit) | P_RawWeight(SKU, rawtm, rawunit) > 0) do
                    	S_TransportationMode := S_TransportationMode + rawtm;
                    
                    	P_SkuTM(SKU, rawtm) := 1;
                    
                    	if (rawunit = P_SHIPPER) then 
                    		P_WeightPerShipper(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                    	endif;
                    
                    	if (rawunit = P_PCS) then
                    		P_WeightPerPcs(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                    	endif;
                    endfor;
                    
                    for ((SKU, rawtm, rawunit) | P_RawVolume(SKU, rawtm, rawunit) > 0) do
                    	S_TransportationMode := S_TransportationMode + rawtm;
                    
                    	P_SkuTM(SKU, rawtm) := 1;
                    
                    	if (rawunit = P_SHIPPER) then 
                    		P_VolumePerShipper(SKU, rawtm) := P_RawVolume(SKU, rawtm, rawunit);
                    	endif;
                    endfor;
                    
                    S_SN := S_RawSN;
                    
                    ! Passing parameters
                    P_DC := P_SelectedDC;
                    
                    P_AdditionalDropoffCostDiffCity(tk) := P_RawAdditionalDropoffCostDiffCity(P_RawTruckTruckType(tk));
                    P_AdditionalDropoffCostSameCity(tk) := P_RawAdditionalDropoffCostSameCity(P_RawTruckTruckType(tk));
                    
                    P_TruckTM(tk) := P_RawTMofTruckType(P_RawTruckTruckType(tk));
                    
                    P_MaxCustomer(tk) := P_RawMaxCustomerPerTrip(P_RawTruckTruckType(tk));
                    P_MaxTravelDay(tk) := P_RawMaxTravelDay(P_RawTruckTruckType(tk));
                    P_TruckVolumeCap(tk) := P_RawVolumeCapacity(P_RawTruckTruckType(tk));
                    P_TruckWeightCap(tk) := P_RawWeightCapacity(P_RawTruckTruckType(tk));
                    
                    P_HandOverTime(tk, cs) := P_RawDefaultHandOverTime;
                    
                    P_TruckCity(tk, ct) := P_RawTruckCity(tk, ct);
                    
                    P_SkuMaxiumOnRoadTime(SKU) := P_RawMaxOnRoadTime(SKU);
                    P_ConversionRateToShipper(SKU) := P_RawConversionRateToShipper(SKU, P_PCS);
                    P_DCHandlingCapacityConsumptionRate(SKU) := P_RawDCHandlingCapacityConsumptionRate(SKU);
                    
                    !sub model update
                    P_DCHandlingShipperCap := P_RawMaxShipperPerDay(P_DC);
                    P_DCHandlingCustomerCap := P_RawMaxCustomerPerDay(P_DC);
                    
                    if (P_RawAccountClosingFirstDate in Cal_Days) then
                    	P_AccountClosingFirstDay := P_RawAccountClosingFirstDate;
                    endif;
                    
                    P_PlanningHorizonStartDate := P_RawPlanningHorizonStartDate;
                    
                    if (P_RawAccountClosingFirstDate in Cal_Days) then
                    	P_DayGapStartToAccountClosing := P_AccountClosingFirstDay - P_PlanningHorizonStartDate;
                    endif;
                    
                    P_BigMInMeetOrder2 := 0;
                    for (SKU) do
                    	if(P_BigMInMeetOrder2 < P_RawConversionRateToShipper(SKU, P_PCS)) then
                    		P_BigMInMeetOrder2 := P_RawConversionRateToShipper(SKU, P_PCS);
                    	endif;
                    endfor;
                    P_BigMInMeetOrder2 := 2 * P_BigMInMeetOrder2;
                    
                    P_BigMInSKUMaxOnRoadTime := 20 * 24;
                    P_BigM := 1000000;
                    
                    ! Passing derived parameters
                    for (lc1, lc2 | P_RawDistance(lc1, lc2) = 0 and P_RawLatitude(lc1) > 0 and P_RawLatitude(lc2) > 0 and P_RawLongitude(lc1) > 0 and P_RawLongitude(lc2) > 0 and not (lc1 = lc2)) do
                    	CalculateDistance(P_RawLatitude(lc1), P_RawLatitude(lc2), P_RawLongitude(lc1), P_RawLongitude(lc2), P_RawDistance(lc1,lc2));
                    endfor;
                    
                    P_TransportationCost(tk, lc1, lc2) := P_RawDistance(lc1,lc2) * P_RawTransportationCostPerKm(P_RawTruckTruckType(tk));
                    P_TransportationCost(tk, lc1, lc2) := round(P_TransportationCost(tk, lc1, lc2), 0);
                    P_TransportationTime(tk, lc1, lc2) := ceil(P_RawDistance(lc1,lc2) / P_RawTravelSpeed(P_RawTruckTruckType(tk)));
                    
                    for (cs | cs in S_RawCustomer) do
                    	P_i := 1;
                    	P_j := 0;
                    	P_k := 1;
                    
                    	for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = P_WeekDayofStartDate) do
                    		P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                    		P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn);
                    
                    		P_i := P_i + 1;
                    		P_j := P_RawEndTimeofTimeWindowSN(rawsn);
                    	endfor;
                    
                    	while (P_k <= P_RawPlannningDays) do
                    		for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = mod(P_WeekDayofStartDate + P_k, 7)) do
                    			P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                    			P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn) + 24 * P_k;
                    
                    			P_i := P_i + 1;
                    			P_j := P_RawEndTimeofTimeWindowSN(rawsn) + 24 * P_k;
                    		endfor;
                    
                    		P_k := P_k + 1;
                    	endwhile;
                    endfor;
                    
                    for (cs | cs in S_RawLocalDeliveryId) do
                    	P_i := 1;
                    	P_j := 0;
                    	P_k := 1;
                    
                    	for (rawsn | P_RawLDDayofWeek(cs, rawsn) > 0 and P_RawLDDayofWeek(cs, rawsn) = P_WeekDayofStartDate) do
                    		P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                    		P_DisallowedTimeWindowEnd(cs, P_i) := P_RawLDStartOfTimeWindow(cs, rawsn);
                    
                    		P_i := P_i + 1;
                    		P_j := P_RawLDEndOfTimeWindow(cs, rawsn);
                    	endfor;
                    
                    	while (P_k <= P_RawPlannningDays) do
                    		for (rawsn | P_RawLDDayofWeek(cs, rawsn) > 0 and P_RawLDDayofWeek(cs, rawsn) = mod(P_WeekDayofStartDate + P_k, 7)) do
                    			P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                    			P_DisallowedTimeWindowEnd(cs, P_i) := P_RawLDStartOfTimeWindow(cs, rawsn) + 24 * P_k;
                    
                    			P_i := P_i + 1;
                    			P_j := P_RawLDEndOfTimeWindow(cs, rawsn) + 24 * P_k;
                    		endfor;
                    
                    		P_k := P_k + 1;
                    	endwhile;
                    endfor;
                    
                    !sub model update
                    P_DCAvailableStock(SKU) := P_RawDCAvailableStock(P_DC, SKU);
                    
                    for ((lc1, lc2) | (not (lc1 = lc2)) and (not (lc1 = P_DC)) and (not (lc2 = P_DC)) and P_CustomerCity(lc1) = P_CustomerCity(lc2)) do
                    	P_IsSameCity(lc1, lc2) := 1;
                    endfor;
                }
            }
            Procedure SaveSubModelResult {
                Body: {
                    P_SubV_Travel(tk, lc1, lc2) := V_Travel(tk, lc1, lc2);
                    P_SubV_DepartureTime(tk, lc1) := V_DepartureTime(tk, lc1);
                    P_SubV_AssignOrder(od, tk) := V_AssignOrder(od, tk);
                    P_SubV_AssignOrderShipper(od, tk) := V_AssignOrderShipper(od, tk);
                    P_SubV_AssignOrderNonFullShipper(od, tk) := V_AssignOrderNonFullShipper(od, tk);
                    P_SubV_ServeCustomer(cs, tk) := V_ServeCustomer(cs, tk);
                    !P_SubV_DcServeCustomer(cs) := V_DcServeCustomer(cs);
                    P_SubV_IsBeforeDisallowedTimeWindow(tk, cs, sn) := V_IsBeforeDisallowedTimeWindow(tk, cs, sn);
                    
                    for (od | V_UnMetOrderShipper(od) > 0) do
                    	P_SubV_UnMetOrderShipper(od) := V_UnMetOrderShipper(od);
                    endfor;
                    for (od | V_UnMetOrderNonFullShipper(od) > 0) do
                    	P_SubV_UnMetOrderNonFullShipper(od) := V_UnMetOrderNonFullShipper(od);
                    endfor;
                    
                    P_SubV_TotalTransportationCost := P_SubV_TotalTransportationCost + V_TotalTransportationCost;
                    P_SubV_TotalAdditionalCost := P_SubV_TotalAdditionalCost + V_TotalAdditionalCost;
                    P_SubV_TotalTimeSpan := P_SubV_TotalTimeSpan + V_TotalTimeSpan;
                    P_SubV_TotalUnMetOrder := P_SubV_TotalUnMetOrder + V_TotalUnMetOrder;
                    P_SubV_Objective := P_SubV_Objective + V_Objective;
                    
                    for((od, tk) | V_AssignOrder(od, tk) = 1) do
                    	P_IsUsedTruck(tk) := 1;
                    endfor;
                    
                    P_SubInput_TransportationTime(tk, lc1, lc2) := P_TransportationTime(tk, lc1, lc2);
                    
                    for (od | P_OrderCustomer(od)) do
                    	P_SubInput_OrderCustomer(od) := P_OrderCustomer(od);
                    endfor;
                    
                    for (od | P_OrderSKU(od)) do
                    	P_SubInput_OrderSKU(od) := P_OrderSKU(od);
                    endfor;
                    
                    for (od | P_OrderPcs(od) > 0) do
                    	P_SubInput_OrderPcs(od) := P_OrderPcs(od);
                    endfor;
                    
                    P_SubInput_AdditionalDropoffCostDiffCity(tk) := P_AdditionalDropoffCostDiffCity(tk);
                    P_SubInput_AdditionalDropoffCostSameCity(tk) := P_AdditionalDropoffCostSameCity(tk);
                    P_SubInput_IsSameCity(lc1, lc2) := P_IsSameCity(lc1, lc2);
                }
            }
        }
        DeclarationSection RunParametersForLocalDelivery {
            ElementParameter P_SelectedLocalDeliveryId {
                Range: S_RawLocalDeliveryId;
            }
            Parameter P_IsVxOrderInLDScope {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsVxOrderInLDModel {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsRxOrderInLDScope {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_IsRxOrderInLDModel {
                IndexDomain: rawindex;
                Range: binary;
            }
            Parameter P_UI_SolvingTimeLimitLD {
                InitialData: 30;
            }
            Parameter P_Actual_SolvingTimeLimitLD;
        }
        Procedure OrderSelectionLocalDelivery {
            Body: {
                empty RunParametersCommon;
                empty RunParametersForLocalDelivery;
                
                P_VxFirmOrderStatus := '集单已完成；订单已释放待发货';
                P_VxFirmOrderStatus2 := 'Firm';
                P_RxFirmOrderStatus := 'Firm';
                P_PCS := 'PCS';
                P_SHIPPER := 'SHIPPER';
                
                P_UI_SolvingTimeLimitLD := 30;
                
                ! Select Order - Vx
                for (rawindex | P_RawCityInSalesOrderVx(rawindex) = P_RawSelectedLocalDeliveryId) do
                		P_IsVxOrderInLDScope(rawindex) := 1;
                endfor;
                
                for (rawindex | P_RawCityInSalesOrderVx(rawindex) = P_RawSelectedLocalDeliveryId
                		and (P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus or P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus2)		
                		and P_RawOrderDateInSalesOrderVx(rawindex) <= P_RawLocalDeliveryStartDate - P_RawOrderDateGapDeliveryStartDate
                		and P_RawOrderDateInSalesOrderVx(rawindex) > P_RawLocalDeliveryStartDate - P_RawOrderDateGapDeliveryEndDate
                		and P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) <= P_RawLocalDeliveryStartDate + P_RawLocalDeliveryPlanningDays
                		and P_RawLatestDeliveryDateInSalesOrderVx(rawindex) >= P_RawLocalDeliveryStartDate
                		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer
                		) do
                		P_IsVxOrderInLDModel(rawindex) := 1;
                endfor;
                
                ! Select Order - Rx
                for (rawindex | P_RawRxLocalDeliveryIdInSalesOrder(rawindex) = P_RawSelectedLocalDeliveryId) do
                		P_IsRxOrderInLDScope(rawindex) := 1;
                endfor;
                
                for (rawindex | P_RawRxLocalDeliveryIdInSalesOrder(rawindex) = P_RawSelectedLocalDeliveryId
                		and P_RawRxStatusInSalesOrder(rawindex) = P_RxFirmOrderStatus
                		and P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) <= P_RawLocalDeliveryStartDate + P_RawLocalDeliveryPlanningDays
                		and P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) >= P_RawLocalDeliveryStartDate
                		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer
                		) do
                		P_IsRxOrderInLDModel(rawindex) := 1;
                endfor;
            }
        }
        Procedure ProcessDataLocalDelivery {
            Body: {
                ProcessRawData;
                
                OrderSelectionLocalDelivery;
            }
        }
        Procedure PassingRawDataToLocalDeliveryModel {
            Body: {
                empty ModelSet;
                empty ModelParameters;
                empty ModelParametersDerived;
                
                P_SelectedLocalDeliveryId := P_RawSelectedLocalDeliveryId;
                P_DepartureTimeAtDC := P_RawLocalDeliveryTruckStartHour;
                P_WeekDayofStartDate := P_RawWeekDay(P_RawLocalDeliveryStartDate);
                
                ! Passing set
                S_Location := S_Location + P_SelectedLocalDeliveryId;
                !for (rawindex | P_RawCityInSalesOrderVx(rawindex) = P_SelectedLocalDeliveryId
                !		and (P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus or P_RawStatusInSalesOrderVx(rawindex) = P_VxFirmOrderStatus2)
                !		and P_RawOrderDateInSalesOrderVx(rawindex) <= P_RawLocalDeliveryStartDate
                !		and P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) <= P_RawLocalDeliveryStartDate + P_RawLocalDeliveryPlanningDays
                !		and P_RawLatestDeliveryDateInSalesOrderVx(rawindex) >= P_RawLocalDeliveryStartDate
                !		) do
                for (rawindex | P_IsVxOrderInLDScope(rawindex) = 1 and P_IsVxOrderInLDModel(rawindex) = 1
                		and P_RawCustomerInSalesOrderVx(rawindex) in S_RawCustomer
                		) do
                	S_Order := S_Order + rawindex;
                	S_SKU := S_SKU + P_RawSKUInSalesOrderVx(rawindex);
                
                	P_OrderSKU(rawindex) := P_RawSKUInSalesOrderVx(rawindex);
                	P_OrderShipper(rawindex) := floor(P_RawQuantityInSalesOrderVx(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                	P_OrderPcs(rawindex) := mod(P_RawQuantityInSalesOrderVx(rawindex), P_RawConversionRateToShipper(P_OrderSKU(rawindex), P_PCS));
                
                	P_EarliestArrivalTime(rawindex) := (P_RawEarliestDeliveryDateInSalesOrderVx(rawindex) - P_RawLocalDeliveryStartDate) * 24;
                	if (P_EarliestArrivalTime(rawindex) < 0) then
                		P_EarliestArrivalTime(rawindex) := 0;
                	endif;
                
                	P_LatestDepartureTime(rawindex) := (P_RawLatestDeliveryDateInSalesOrderVx(rawindex) - P_RawLocalDeliveryStartDate + 1) * 24;
                	if (P_LatestDepartureTime(rawindex) < 0) then
                		P_LatestDepartureTime(rawindex) := 0;
                	endif;
                
                	S_Location := S_Location + P_RawCustomerInSalesOrderVx(rawindex);
                	S_Customer := S_Customer + P_RawCustomerInSalesOrderVx(rawindex);
                
                	S_City := S_City + P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                	P_CustomerCity(P_RawCustomerInSalesOrderVx(rawindex)) := P_RawCustomerCity(P_RawCustomerInSalesOrderVx(rawindex));
                
                	P_OrderCustomer(rawindex) := P_RawCustomerInSalesOrderVx(rawindex);
                endfor;
                
                !for (rawindex | P_RawRxLocalDeliveryIdInSalesOrder(rawindex) = P_SelectedLocalDeliveryId
                !		and P_RawRxStatusInSalesOrder(rawindex) = P_RxFirmOrderStatus
                !		and P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) <= P_RawLocalDeliveryStartDate + P_RawLocalDeliveryPlanningDays
                !		and P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) >= P_RawLocalDeliveryStartDate
                !		) do
                for (rawindex | P_IsRxOrderInLDScope(rawindex) = 1 and P_IsRxOrderInLDModel(rawindex) = 1
                		and P_RawRxCustomerInSalesOrder(rawindex) in S_RawCustomer
                		) do
                	P_UpdatedIndex := rawindex + card(S_RawIndex) / 2;
                
                	S_Order := S_Order + P_UpdatedIndex;
                	S_SKU := S_SKU + P_RawRxSKUInSalesOrder(rawindex);
                
                	P_OrderSKU(P_UpdatedIndex) := P_RawRxSKUInSalesOrder(rawindex);
                	P_OrderShipper(P_UpdatedIndex) := floor(P_RawRxQuantityInSalesOrder(rawindex) / P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                	P_OrderPcs(P_UpdatedIndex) := mod(P_RawRxQuantityInSalesOrder(rawindex), P_RawConversionRateToShipper(P_OrderSKU(P_UpdatedIndex), P_PCS));
                
                	P_EarliestArrivalTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryStartDateInSalesOrder(rawindex) - P_RawLocalDeliveryStartDate) * 24;
                	if (P_EarliestArrivalTime(P_UpdatedIndex) < 0) then
                		P_EarliestArrivalTime(P_UpdatedIndex) := 0;
                	endif;
                
                	P_LatestDepartureTime(P_UpdatedIndex) := (P_RawRxPreferredDeliveryEndDateInSalesOrder(rawindex) - P_RawLocalDeliveryStartDate + 1) * 24;
                	if (P_LatestDepartureTime(P_UpdatedIndex) < 0) then
                		P_LatestDepartureTime(P_UpdatedIndex) := 0;
                	endif;
                
                	S_Location := S_Location + P_RawRxCustomerInSalesOrder(rawindex);
                	S_Customer := S_Customer + P_RawRxCustomerInSalesOrder(rawindex);
                
                	S_City := S_City + P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                	P_CustomerCity(P_RawRxCustomerInSalesOrder(rawindex)) := P_RawCustomerCity(P_RawRxCustomerInSalesOrder(rawindex));
                
                	P_OrderCustomer(P_UpdatedIndex) := P_RawRxCustomerInSalesOrder(rawindex);
                endfor;
                
                if (card(S_Order) = 0) then
                	dialogMessage("No order passed to local delivery model.", "Error Message");
                endif;
                
                P_BigMInDCServeCustomer1 := 0;
                for(rawtk | P_RawTruckOwnerId(rawtk) = P_SelectedLocalDeliveryId) do
                	S_Truck := S_Truck + rawtk;
                	P_BigMInDCServeCustomer1 := P_BigMInDCServeCustomer1 + 1;
                endfor;
                
                for ((SKU, rawtm, rawunit) | P_RawWeight(SKU, rawtm, rawunit) > 0) do
                	S_TransportationMode := S_TransportationMode + rawtm;
                
                	P_SkuTM(SKU, rawtm) := 1;
                
                	if (rawunit = P_SHIPPER) then 
                		P_WeightPerShipper(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                	endif;
                
                	if (rawunit = P_PCS) then
                		P_WeightPerPcs(SKU, rawtm) := P_RawWeight(SKU, rawtm, rawunit);
                	endif;
                endfor;
                
                for ((SKU, rawtm, rawunit) | P_RawVolume(SKU, rawtm, rawunit) > 0) do
                	S_TransportationMode := S_TransportationMode + rawtm;
                
                	P_SkuTM(SKU, rawtm) := 1;
                
                	if (rawunit = P_SHIPPER) then 
                		P_VolumePerShipper(SKU, rawtm) := P_RawVolume(SKU, rawtm, rawunit);
                	endif;
                endfor;
                
                S_SN := S_RawSN;
                
                ! Passing parameters
                P_DC := P_SelectedLocalDeliveryId;
                
                P_AdditionalDropoffCostDiffCity(tk) := P_RawAdditionalDropoffCostDiffCity(P_RawTruckTruckType(tk));
                P_AdditionalDropoffCostSameCity(tk) := P_RawAdditionalDropoffCostSameCity(P_RawTruckTruckType(tk));
                
                P_TruckTM(tk) := P_RawTMofTruckType(P_RawTruckTruckType(tk));
                
                P_MaxCustomer(tk) := P_RawMaxCustomerPerTrip(P_RawTruckTruckType(tk));
                P_MaxTravelDay(tk) := P_RawMaxTravelDay(P_RawTruckTruckType(tk));
                P_TruckVolumeCap(tk) := P_RawVolumeCapacity(P_RawTruckTruckType(tk));
                P_TruckWeightCap(tk) := P_RawWeightCapacity(P_RawTruckTruckType(tk));
                
                P_HandOverTime(tk, cs) := P_RawDefaultHandOverTime;
                
                P_TruckCity(tk, ct) := P_RawTruckCity(tk, ct);
                
                P_SkuMaxiumOnRoadTime(SKU) := P_RawMaxOnRoadTime(SKU);
                P_ConversionRateToShipper(SKU) := P_RawConversionRateToShipper(SKU, P_PCS);
                
                P_PlanningHorizonStartDate := P_RawLocalDeliveryStartDate;
                
                P_BigMInMeetOrder2 := 0;
                for (SKU) do
                	if(P_BigMInMeetOrder2 < P_RawConversionRateToShipper(SKU, P_PCS)) then
                		P_BigMInMeetOrder2 := P_RawConversionRateToShipper(SKU, P_PCS);
                	endif;
                endfor;
                P_BigMInMeetOrder2 := 2 * P_BigMInMeetOrder2;
                
                P_BigMInSKUMaxOnRoadTime := 20 * 24;
                P_BigM := 1000000;
                
                ! Passing derived parameters
                for (lc1, lc2 | P_RawDistance(lc1, lc2) = 0 and P_RawLatitude(lc1) > 0 and P_RawLatitude(lc2) > 0 and P_RawLongitude(lc1) > 0 and P_RawLongitude(lc2) > 0 and not (lc1 = lc2)) do
                	CalculateDistance(P_RawLatitude(lc1), P_RawLatitude(lc2), P_RawLongitude(lc1), P_RawLongitude(lc2), P_RawDistance(lc1,lc2));
                endfor;
                
                P_TransportationCost(tk, lc1, lc2) := P_RawDistance(lc1,lc2) * P_RawTransportationCostPerKm(P_RawTruckTruckType(tk));
                P_TransportationCost(tk, lc1, lc2) := round(P_TransportationCost(tk, lc1, lc2), 0);
                P_TransportationTime(tk, lc1, lc2) := ceil(P_RawDistance(lc1,lc2) / P_RawTravelSpeed(P_RawTruckTruckType(tk)));
                
                for (cs) do
                	P_i := 1;
                	P_j := 0;
                	P_k := 1;
                
                	for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = P_WeekDayofStartDate) do
                		P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                		P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn);
                
                		P_i := P_i + 1;
                		P_j := P_RawEndTimeofTimeWindowSN(rawsn);
                	endfor;
                
                	while (P_k <= P_RawLocalDeliveryPlanningDays) do
                		for (rawsn | P_RawDayofTimeWindowSN(rawsn) > 0 and P_RawDayofTimeWindowSN(rawsn) = mod(P_WeekDayofStartDate + P_k, 7)) do
                			P_DisallowedTimeWindowStart(cs, P_i) := P_j;
                			P_DisallowedTimeWindowEnd(cs, P_i) := P_RawStartTimeofTimeWindowSN(rawsn) + 24 * P_k;
                
                			P_i := P_i + 1;
                			P_j := P_RawEndTimeofTimeWindowSN(rawsn) + 24 * P_k;
                		endfor;
                
                		P_k := P_k + 1;
                	endwhile;
                endfor;
                
                for ((lc1, lc2) | (not (lc1 = lc2)) and (not (lc1 = P_DC)) and (not (lc2 = P_DC)) and P_CustomerCity(lc1) = P_CustomerCity(lc2)) do
                	P_IsSameCity(lc1, lc2) := 1;
                endfor;
            }
        }
        Procedure RunLocalDeliveryModel {
            Body: {
                if(pro::DelegateToServer) then
                   return 1;
                endif;
                
                PassingRawDataToLocalDeliveryModel;
                
                empty DecisionVariables;
                
                P_Actual_SolvingTimeLimitLD := P_UI_SolvingTimeLimitLD;
                if (P_Actual_SolvingTimeLimitLD <= 20) then
                	P_Actual_SolvingTimeLimitLD := 20;
                endif;
                OptionSetValue("Time Limit", P_Actual_SolvingTimeLimitLD * 60);
                
                solve OptiModel_LocalDelivery;
                
                PassLocalDeliveryResult;
            }
        }
        Procedure Tem {
            Body: {
                P_IsVxOrderInModel(rawindex) := 0;
            }
        }
    }
    Section ResultSection {
        DeclarationSection ResultCommonDeclaration {
            Set S_ResultIndexSet {
                SubsetOf: Integers;
                Index: rei;
                Definition: {
                    {1..2000}
                }
            }
        }
        Section MilkRunResult {
            DeclarationSection MilkRunResultDeclaration {
                ElementParameter P_MRResultIndex {
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_MRResultTruck {
                    IndexDomain: rei;
                    Range: S_RawTruck;
                }
                ElementParameter P_MRResultTruckSequence {
                    IndexDomain: rei;
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_MRResultFromLocation {
                    IndexDomain: rei;
                    Range: S_RawLocation;
                }
                ElementParameter P_MRResultFromCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_MRResultFromRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_MRResultToLocation {
                    IndexDomain: rei;
                    Range: S_RawLocation;
                }
                ElementParameter P_MRResultToCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_MRResultToRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_MRResultNextLocation {
                    Range: S_RawLocation;
                }
                ElementParameter P_MRResultDCDepartureDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                ElementParameter P_MRResultDepartureDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                Parameter P_MRResultDepartureTime {
                    IndexDomain: rei;
                }
                ElementParameter P_MRResultArrivalDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                Parameter P_MRResultArrivalTime {
                    IndexDomain: rei;
                }
                ElementParameter P_MRResultOrderIndex {
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_MRResultOrderTruck {
                    IndexDomain: rei;
                    Range: S_RawTruck;
                }
                ElementParameter P_MRResultOrderTruckSequence {
                    IndexDomain: rei;
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_MRResultOrderCustomer {
                    IndexDomain: rei;
                    Range: S_RawLocation;
                }
                StringParameter P_MRResultOrderCustomerName {
                    IndexDomain: rei;
                }
                ElementParameter P_MRResultOrderCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_MRResultOrderRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_MRResultOrder {
                    IndexDomain: rei;
                    Range: S_RawIndex;
                }
                ElementParameter P_MRResultOrderSKUCategory {
                    IndexDomain: rei;
                    Range: S_RawSKUCategory;
                }
                ElementParameter P_MRResultOrderSKU {
                    IndexDomain: rei;
                    Range: S_RawSKU;
                }
                StringParameter P_MRResultOrderSKUDescription {
                    IndexDomain: rei;
                }
                Parameter P_MRResultOrderShipper {
                    IndexDomain: rei;
                }
                Parameter P_MRResultOrderPcs {
                    IndexDomain: rei;
                }
                Parameter P_MRResultTotalTransportationCost;
                Parameter P_MRResultTotalAdditionalCost;
                Parameter P_MRResultTotalTimeSpan;
                Parameter P_MRResultTotalUnmetOrder;
                Parameter P_MRResultObjective;
                Parameter P_MRResultTotalCost;
                Parameter P_MRResultUnDeliverOrderShipper {
                    IndexDomain: rawindex;
                }
                Parameter P_MRResultUnDeliverOrderPcs {
                    IndexDomain: rawindex;
                }
                ElementParameter P_MRResultUnDeliverOrderSKU {
                    IndexDomain: rawindex;
                    Range: S_RawSKU;
                }
                StringParameter P_MRResultUnDeliverOrderSKUDescription {
                    IndexDomain: rawindex;
                }
            }
            Procedure PassMilkRunResult {
                Body: {
                    empty MilkRunResultDeclaration;
                    empty MilkRunMap;
                    
                    ! Truck Itinerary table and Truck Orders table
                    P_MRResultIndex := 1;
                    P_MRResultOrderIndex := 1;
                    
                    for ((tk, lc) | V_Travel(tk, P_RawSelectedDC, lc) = 1) do
                    	S_UsedTruckMR := S_UsedTruckMR + tk;
                    
                    	P_MRResultTruck(P_MRResultIndex) := tk;
                    	P_MRResultTruckSequence(P_MRResultIndex) := 1;
                    
                    	P_MRResultFromLocation(P_MRResultIndex) := P_RawSelectedDC;
                    	P_MRResultFromCity(P_MRResultIndex) := P_RawDCDescription(P_RawSelectedDC);
                    	P_MRResultFromRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultFromCity(P_MRResultIndex));
                    
                    	P_MRResultToLocation(P_MRResultIndex) := lc;
                    	if (not (P_MRResultToLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    		P_MRResultToCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultToLocation(P_MRResultIndex));
                    	else
                    		P_MRResultToCity(P_MRResultIndex) := P_MRResultToLocation(P_MRResultIndex);
                    	endif;
                    	P_MRResultToRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultToCity(P_MRResultIndex));
                    
                    	P_MRResultDepartureDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor(V_DepartureTime(tk, P_RawSelectedDC) / 24);
                    	P_MRResultDepartureTime(P_MRResultIndex) := mod(V_DepartureTime(tk, P_RawSelectedDC), 24);
                    
                    	P_MRResultArrivalDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor((V_DepartureTime(tk, P_RawSelectedDC) + P_TransportationTime(tk, P_RawSelectedDC, lc)) / 24);
                    	P_MRResultArrivalTime(P_MRResultIndex) := mod((V_DepartureTime(tk, P_RawSelectedDC) + P_TransportationTime(tk, P_RawSelectedDC, lc)), 24);
                    
                    	P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := 1;
                    	for(od | (V_AssignOrder(od, tk) = 1 and P_OrderCustomer(od) = lc)) do
                    		P_MRResultOrderTruck(P_MRResultOrderIndex) := tk;
                    		P_MRResultDCDepartureDate(P_MRResultOrderIndex) := P_RawPlanningHorizonStartDate + floor(V_DepartureTime(tk, P_RawSelectedDC) / 24);
                    		P_MRResultOrderCustomer(P_MRResultOrderIndex) := lc;
                    
                    		if (od <= card(S_RawIndex) / 2) then
                    			P_MRResultOrder(P_MRResultOrderIndex) := od;
                    			P_MRResultOrderCustomerName(P_MRResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(od);
                    		else
                    			P_MRResultOrder(P_MRResultOrderIndex) := od - card(S_RawIndex) / 2;
                    			P_MRResultOrderCustomerName(P_MRResultOrderIndex) := lc;
                    		endif;
                    
                    		if (not (P_MRResultOrderCustomer(P_MRResultOrderIndex) in S_RawLocalDeliveryId)) then
                    			P_MRResultOrderCity(P_MRResultOrderIndex) := P_RawCustomerCity(P_MRResultOrderCustomer(P_MRResultOrderIndex));
                    		else
                    			P_MRResultOrderCity(P_MRResultOrderIndex) := P_MRResultOrderCustomer(P_MRResultOrderIndex);
                    		endif;
                    		P_MRResultOrderRegion(P_MRResultOrderIndex) := P_RawCityRegion(P_MRResultOrderCity(P_MRResultOrderIndex));	
                    
                    		P_MRResultOrderSKUCategory(P_MRResultOrderIndex) := P_RawSKUCategory(P_OrderSKU(od));
                    		P_MRResultOrderSKU(P_MRResultOrderIndex) := P_OrderSKU(od);
                    		P_MRResultOrderSKUDescription(P_MRResultOrderIndex) := P_RawSKUDescription(P_OrderSKU(od));
                    		P_MRResultOrderShipper(P_MRResultOrderIndex) := V_AssignOrderShipper(od, tk);
                    		P_MRResultOrderPcs(P_MRResultOrderIndex) := V_AssignOrderNonFullShipper(od, tk) * P_OrderPcs(od);
                    
                    		if (not (P_MRResultOrderTruckSequence(P_MRResultOrderIndex) = 1)) then
                    			P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := P_MRResultOrderTruckSequence(P_MRResultOrderIndex - 1) + 1;
                    		endif;
                    		P_MRResultOrderIndex := P_MRResultOrderIndex + 1;
                    	endfor;
                    
                    	P_MRResultNextLocation := lc;
                    	P_MRResultIndex := P_MRResultIndex + 1;
                    
                    	while (not (P_MRResultNextLocation = P_RawSelectedDC)) do
                    		for(lc2 | V_Travel(tk, P_MRResultNextLocation, lc2) = 1) do
                    			S_UsedTruckMR := S_UsedTruckMR + tk;
                    
                    			P_MRResultTruck(P_MRResultIndex) := tk;
                    			P_MRResultTruckSequence(P_MRResultIndex) := P_MRResultTruckSequence(P_MRResultIndex - 1) + 1;
                    
                    			P_MRResultFromLocation(P_MRResultIndex) := P_MRResultNextLocation;
                    			if (not (P_MRResultFromLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    				P_MRResultFromCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultFromLocation(P_MRResultIndex));
                    			else
                    				P_MRResultFromCity(P_MRResultIndex) := P_MRResultFromLocation(P_MRResultIndex);
                    			endif;
                    			P_MRResultFromRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultFromCity(P_MRResultIndex));
                    
                    			P_MRResultToLocation(P_MRResultIndex) := lc2;
                    			if (lc2 = P_RawSelectedDC) then
                    				P_MRResultToCity(P_MRResultIndex) := P_RawDCDescription(P_RawSelectedDC);
                    			else
                    				if (not (P_MRResultToLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    					P_MRResultToCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultToLocation(P_MRResultIndex));
                    				else
                    					P_MRResultToCity(P_MRResultIndex) := P_MRResultToLocation(P_MRResultIndex);
                    				endif;
                    			endif;
                    			P_MRResultToRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultToCity(P_MRResultIndex));
                    
                    			P_MRResultDepartureDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor(V_DepartureTime(tk, P_MRResultNextLocation) / 24);
                    			P_MRResultDepartureTime(P_MRResultIndex) := mod(V_DepartureTime(tk, P_MRResultNextLocation), 24);
                    
                    			P_MRResultArrivalDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate
                    								  + floor((V_DepartureTime(tk, P_MRResultNextLocation) + P_TransportationTime(tk, P_MRResultNextLocation, lc2)) / 24);
                    			P_MRResultArrivalTime(P_MRResultIndex) := mod((V_DepartureTime(tk, P_MRResultNextLocation) + P_TransportationTime(tk, P_MRResultNextLocation, lc2)), 24);
                    
                    			if (not (lc2 = P_RawSelectedDC)) then
                    				for(od | V_AssignOrder(od, tk) = 1 and P_OrderCustomer(od) = lc2) do
                    					P_MRResultOrderTruck(P_MRResultOrderIndex) := tk;
                    					P_MRResultDCDepartureDate(P_MRResultOrderIndex) := P_RawPlanningHorizonStartDate + floor(V_DepartureTime(tk, P_RawSelectedDC) / 24);
                    					P_MRResultOrderCustomer(P_MRResultOrderIndex) := lc2;
                    
                    					if (od <= card(S_RawIndex) / 2) then
                    						P_MRResultOrder(P_MRResultOrderIndex) := od;
                    						P_MRResultOrderCustomerName(P_MRResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(od);
                    					else
                    						P_MRResultOrder(P_MRResultOrderIndex) := od - card(S_RawIndex) / 2;
                    						P_MRResultOrderCustomerName(P_MRResultOrderIndex) := lc2;
                    					endif;
                    
                    					if (not (P_MRResultOrderCustomer(P_MRResultOrderIndex) in S_RawLocalDeliveryId)) then
                    						P_MRResultOrderCity(P_MRResultOrderIndex) := P_RawCustomerCity(P_MRResultOrderCustomer(P_MRResultOrderIndex));
                    					else
                    						P_MRResultOrderCity(P_MRResultOrderIndex) := P_MRResultOrderCustomer(P_MRResultOrderIndex);
                    					endif;
                    					P_MRResultOrderRegion(P_MRResultOrderIndex) := P_RawCityRegion(P_MRResultOrderCity(P_MRResultOrderIndex));					
                    
                    					P_MRResultOrderSKUCategory(P_MRResultOrderIndex) := P_RawSKUCategory(P_OrderSKU(od));
                    					P_MRResultOrderSKU(P_MRResultOrderIndex) := P_OrderSKU(od);
                    					P_MRResultOrderSKUDescription(P_MRResultOrderIndex) := P_RawSKUDescription(P_OrderSKU(od));
                    					P_MRResultOrderShipper(P_MRResultOrderIndex) := V_AssignOrderShipper(od, tk);
                    					P_MRResultOrderPcs(P_MRResultOrderIndex) := V_AssignOrderNonFullShipper(od, tk) * P_OrderPcs(od);
                    
                    					P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := P_MRResultOrderTruckSequence(P_MRResultOrderIndex - 1) + 1;
                    					P_MRResultOrderIndex := P_MRResultOrderIndex + 1;
                    				endfor;
                    			endif;
                    		endfor;
                    
                    		P_MRResultNextLocation := P_MRResultToLocation(P_MRResultIndex);
                    		P_MRResultIndex := P_MRResultIndex + 1;
                    	endwhile;
                    endfor;
                    
                    
                    
                    ! Cost Summary table
                    P_MRResultTotalTransportationCost := V_TotalTransportationCost;
                    P_MRResultTotalAdditionalCost := V_TotalAdditionalCost;
                    P_MRResultTotalTimeSpan := V_TotalTimeSpan;
                    P_MRResultTotalUnmetOrder := V_TotalUnMetOrder;
                    P_MRResultObjective := V_Objective;
                    
                    P_MRResultTotalCost := P_MRResultTotalTransportationCost + P_MRResultTotalAdditionalCost;
                    
                    
                    
                    ! UnDelivered Order table
                    for(od | V_UnMetOrderShipper(od) > 0) do
                    	if (od <= card(S_RawIndex) / 2) then
                    		P_MRResultUnDeliverOrderShipper(od) := V_UnMetOrderShipper(od);
                    		P_MRResultUnDeliverOrderSKU(od) := P_RawSKUInSalesOrderVx(od);
                    		P_MRResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(od));
                    	else
                    !		P_MRResultUnDeliverOrderShipper(od - card(S_RawIndex) / 2) := V_UnMetOrderShipper(od);
                    !		P_MRResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    !		P_MRResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    
                    		P_MRResultUnDeliverOrderShipper(od) := V_UnMetOrderShipper(od);
                    		P_MRResultUnDeliverOrderSKU(od) := P_RawRxSKUInSalesOrder(od);
                    		P_MRResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    	endif;
                    endfor;
                    
                    for(od | V_UnMetOrderNonFullShipper(od) > 0) do
                    	if (od <= card(S_RawIndex) / 2) then
                    		P_MRResultUnDeliverOrderPcs(od) := V_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    		P_MRResultUnDeliverOrderSKU(od) := P_RawSKUInSalesOrderVx(od);
                    		P_MRResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(od));
                    	else
                    !		P_MRResultUnDeliverOrderPcs(od - card(S_RawIndex) / 2) := V_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    !		P_MRResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    !		P_MRResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    
                    		P_MRResultUnDeliverOrderPcs(od) := V_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    		P_MRResultUnDeliverOrderSKU(od) := P_RawRxSKUInSalesOrder(od);
                    		P_MRResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    	endif;
                    endfor;
                    
                    
                    
                    ! Display color
                    P_ColorIntMR := 5;
                    for (UsedtkMr) do
                    	for (IndexColors) do
                    		P_TruckColorMR(UsedtkMr) := IndexColors + P_ColorIntMR;
                    		break;
                    	endfor;
                    
                    	P_ColorIntMR := P_ColorIntMR + 1;
                    	if (P_ColorIntMR = 15) then
                    		P_ColorIntMR := 5;
                    	endif;
                    endfor;
                    
                    DisplayAllTrucksMR;
                    
                    CalculateTransportationCostMR;
                }
            }
            Procedure PassMilkRunResultAggregate {
                Body: {
                    empty MilkRunResultDeclaration;
                    empty MilkRunMap;
                    
                    ! Truck Itinerary table and Truck Orders table
                    P_MRResultIndex := 1;
                    P_MRResultOrderIndex := 1;
                    
                    for ((rawtk, rawlc) | P_SubV_Travel(rawtk, P_RawSelectedDC, rawlc) = 1) do
                    	S_UsedTruckMR := S_UsedTruckMR + rawtk;
                    
                    	P_MRResultTruck(P_MRResultIndex) := rawtk;
                    	P_MRResultTruckSequence(P_MRResultIndex) := 1;
                    
                    	P_MRResultFromLocation(P_MRResultIndex) := P_RawSelectedDC;
                    	P_MRResultFromCity(P_MRResultIndex) := P_RawDCDescription(P_RawSelectedDC);
                    	P_MRResultFromRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultFromCity(P_MRResultIndex));
                    
                    	P_MRResultToLocation(P_MRResultIndex) := rawlc;
                    	if (not (P_MRResultToLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    		P_MRResultToCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultToLocation(P_MRResultIndex));
                    	else
                    		P_MRResultToCity(P_MRResultIndex) := P_MRResultToLocation(P_MRResultIndex);
                    	endif;
                    	P_MRResultToRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultToCity(P_MRResultIndex));
                    
                    	P_MRResultDepartureDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor(P_SubV_DepartureTime(rawtk, P_RawSelectedDC) / 24);
                    	P_MRResultDepartureTime(P_MRResultIndex) := mod(P_SubV_DepartureTime(rawtk, P_RawSelectedDC), 24);
                    
                    	P_MRResultArrivalDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor((P_SubV_DepartureTime(rawtk, P_RawSelectedDC) + P_SubInput_TransportationTime(rawtk, P_RawSelectedDC, rawlc)) / 24);
                    	P_MRResultArrivalTime(P_MRResultIndex) := mod((P_SubV_DepartureTime(rawtk, P_RawSelectedDC) + P_SubInput_TransportationTime(rawtk, P_RawSelectedDC, rawlc)), 24);
                    
                    	P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := 1;
                    	for(allod | P_SubV_AssignOrder(allod, rawtk) = 1 and P_SubInput_OrderCustomer(allod) = rawlc) do
                    		P_MRResultOrderTruck(P_MRResultOrderIndex) := rawtk;
                    		P_MRResultDCDepartureDate(P_MRResultOrderIndex) := P_RawPlanningHorizonStartDate + floor(P_SubV_DepartureTime(rawtk, P_RawSelectedDC) / 24);
                    		P_MRResultOrderCustomer(P_MRResultOrderIndex) := rawlc;
                    
                    		if (allod <= card(S_RawIndex) / 2) then
                    			P_MRResultOrder(P_MRResultOrderIndex) := allod;
                    			P_MRResultOrderCustomerName(P_MRResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(allod);
                    		else
                    			P_MRResultOrder(P_MRResultOrderIndex) := allod - card(S_RawIndex) / 2;
                    			P_MRResultOrderCustomerName(P_MRResultOrderIndex) := rawlc;
                    		endif;
                    
                    		if (not (P_MRResultOrderCustomer(P_MRResultOrderIndex) in S_RawLocalDeliveryId)) then
                    			P_MRResultOrderCity(P_MRResultOrderIndex) := P_RawCustomerCity(P_MRResultOrderCustomer(P_MRResultOrderIndex));
                    		else
                    			P_MRResultOrderCity(P_MRResultOrderIndex) := P_MRResultOrderCustomer(P_MRResultOrderIndex);
                    		endif;
                    		P_MRResultOrderRegion(P_MRResultOrderIndex) := P_RawCityRegion(P_MRResultOrderCity(P_MRResultOrderIndex));
                    
                    		P_MRResultOrderSKUCategory(P_MRResultOrderIndex) := P_RawSKUCategory(P_SubInput_OrderSKU(allod));
                    		P_MRResultOrderSKU(P_MRResultOrderIndex) := P_SubInput_OrderSKU(allod);
                    		P_MRResultOrderSKUDescription(P_MRResultOrderIndex) := P_RawSKUDescription(P_SubInput_OrderSKU(allod));
                    		P_MRResultOrderShipper(P_MRResultOrderIndex) := P_SubV_AssignOrderShipper(allod, rawtk);
                    		P_MRResultOrderPcs(P_MRResultOrderIndex) := P_SubV_AssignOrderNonFullShipper(allod, rawtk) * P_SubInput_OrderPcs(allod);
                    
                    		if (not (P_MRResultOrderTruckSequence(P_MRResultOrderIndex) = 1)) then
                    			P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := P_MRResultOrderTruckSequence(P_MRResultOrderIndex - 1) + 1;
                    		endif;
                    		P_MRResultOrderIndex := P_MRResultOrderIndex + 1;
                    	endfor;
                    
                    	P_MRResultNextLocation := rawlc;
                    	P_MRResultIndex := P_MRResultIndex + 1;
                    
                    	while (not (P_MRResultNextLocation = P_RawSelectedDC)) do
                    		for(rawlc2 | P_SubV_Travel(rawtk, P_MRResultNextLocation, rawlc2) = 1) do
                    			S_UsedTruckMR := S_UsedTruckMR + rawtk;
                    
                    			P_MRResultTruck(P_MRResultIndex) := rawtk;
                    			P_MRResultTruckSequence(P_MRResultIndex) := P_MRResultTruckSequence(P_MRResultIndex - 1) + 1;
                    
                    			P_MRResultFromLocation(P_MRResultIndex) := P_MRResultNextLocation;
                    			if (not (P_MRResultFromLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    				P_MRResultFromCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultFromLocation(P_MRResultIndex));
                    			else
                    				P_MRResultFromCity(P_MRResultIndex) := P_MRResultFromLocation(P_MRResultIndex);
                    			endif;
                    			P_MRResultFromRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultFromCity(P_MRResultIndex));
                    
                    			P_MRResultToLocation(P_MRResultIndex) := rawlc2;
                    			if (rawlc2 = P_RawSelectedDC) then
                    				P_MRResultToCity(P_MRResultIndex) := P_RawDCDescription(P_RawSelectedDC);
                    			else
                    				if (not (P_MRResultToLocation(P_MRResultIndex) in S_RawLocalDeliveryId)) then
                    					P_MRResultToCity(P_MRResultIndex) := P_RawCustomerCity(P_MRResultToLocation(P_MRResultIndex));
                    				else
                    					P_MRResultToCity(P_MRResultIndex) := P_MRResultToLocation(P_MRResultIndex);
                    				endif;
                    			endif;
                    			P_MRResultToRegion(P_MRResultIndex) := P_RawCityRegion(P_MRResultToCity(P_MRResultIndex));
                    
                    			P_MRResultDepartureDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate + floor(P_SubV_DepartureTime(rawtk, P_MRResultNextLocation) / 24);
                    			P_MRResultDepartureTime(P_MRResultIndex) := mod(P_SubV_DepartureTime(rawtk, P_MRResultNextLocation), 24);
                    
                    			P_MRResultArrivalDate(P_MRResultIndex) := P_RawPlanningHorizonStartDate
                    								  + floor((P_SubV_DepartureTime(rawtk, P_MRResultNextLocation) + P_SubInput_TransportationTime(rawtk, P_MRResultNextLocation, rawlc2)) / 24);
                    			P_MRResultArrivalTime(P_MRResultIndex) := mod((P_SubV_DepartureTime(rawtk, P_MRResultNextLocation) + P_SubInput_TransportationTime(rawtk, P_MRResultNextLocation, rawlc2)), 24);
                    
                    			if (not (rawlc2 = P_RawSelectedDC)) then
                    				for(allod | P_SubV_AssignOrder(allod, rawtk) = 1 and P_SubInput_OrderCustomer(allod) = rawlc2) do
                    					P_MRResultOrderTruck(P_MRResultOrderIndex) := rawtk;
                    					P_MRResultDCDepartureDate(P_MRResultOrderIndex) := P_RawPlanningHorizonStartDate + floor(P_SubV_DepartureTime(rawtk, P_RawSelectedDC) / 24);
                    					P_MRResultOrderCustomer(P_MRResultOrderIndex) := rawlc2;
                    
                    					if (allod <= card(S_RawIndex) / 2) then
                    						P_MRResultOrder(P_MRResultOrderIndex) := allod;
                    						P_MRResultOrderCustomerName(P_MRResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(allod);
                    					else
                    						P_MRResultOrder(P_MRResultOrderIndex) := allod - card(S_RawIndex) / 2;
                    						P_MRResultOrderCustomerName(P_MRResultOrderIndex) := rawlc2;
                    					endif;
                    
                    					if (not (P_MRResultOrderCustomer(P_MRResultOrderIndex) in S_RawLocalDeliveryId)) then
                    						P_MRResultOrderCity(P_MRResultOrderIndex) := P_RawCustomerCity(P_MRResultOrderCustomer(P_MRResultOrderIndex));
                    					else
                    						P_MRResultOrderCity(P_MRResultOrderIndex) := P_MRResultOrderCustomer(P_MRResultOrderIndex);
                    					endif;
                    					P_MRResultOrderRegion(P_MRResultOrderIndex) := P_RawCityRegion(P_MRResultOrderCity(P_MRResultOrderIndex));					
                    
                    					P_MRResultOrderSKUCategory(P_MRResultOrderIndex) := P_RawSKUCategory(P_SubInput_OrderSKU(allod));
                    					P_MRResultOrderSKU(P_MRResultOrderIndex) := P_SubInput_OrderSKU(allod);
                    					P_MRResultOrderSKUDescription(P_MRResultOrderIndex) := P_RawSKUDescription(P_SubInput_OrderSKU(allod));
                    					P_MRResultOrderShipper(P_MRResultOrderIndex) := P_SubV_AssignOrderShipper(allod, rawtk);
                    					P_MRResultOrderPcs(P_MRResultOrderIndex) := P_SubV_AssignOrderNonFullShipper(allod, rawtk) * P_SubInput_OrderPcs(allod);
                    
                    					P_MRResultOrderTruckSequence(P_MRResultOrderIndex) := P_MRResultOrderTruckSequence(P_MRResultOrderIndex - 1) + 1;
                    					P_MRResultOrderIndex := P_MRResultOrderIndex + 1;
                    				endfor;
                    			endif;
                    		endfor;
                    
                    		P_MRResultNextLocation := P_MRResultToLocation(P_MRResultIndex);
                    		P_MRResultIndex := P_MRResultIndex + 1;
                    	endwhile;
                    endfor;
                    
                    
                    
                    ! Cost Summary table
                    P_MRResultTotalTransportationCost := P_SubV_TotalTransportationCost;
                    P_MRResultTotalAdditionalCost := P_SubV_TotalAdditionalCost;
                    P_MRResultTotalTimeSpan := P_SubV_TotalTimeSpan;
                    P_MRResultTotalUnmetOrder := P_SubV_TotalUnMetOrder;
                    P_MRResultObjective := P_SubV_Objective;
                    
                    P_MRResultTotalCost := P_MRResultTotalTransportationCost + P_MRResultTotalAdditionalCost;
                    
                    
                    
                    ! UnDelivered Order table
                    for(allod | P_SubV_UnMetOrderShipper(allod) > 0) do
                    	if (allod <= card(S_RawIndex) / 2) then
                    		P_MRResultUnDeliverOrderShipper(allod) := P_SubV_UnMetOrderShipper(allod);
                    		P_MRResultUnDeliverOrderSKU(allod) := P_RawSKUInSalesOrderVx(allod);
                    		P_MRResultUnDeliverOrderSKUDescription(allod) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(allod));
                    	else
                    !		P_MRResultUnDeliverOrderShipper(od - card(S_RawIndex) / 2) := P_SubV_UnMetOrderShipper(od);
                    !		P_MRResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    !		P_MRResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    
                    		P_MRResultUnDeliverOrderShipper(allod) := P_SubV_UnMetOrderShipper(allod);
                    		P_MRResultUnDeliverOrderSKU(allod) := P_RawRxSKUInSalesOrder(allod);
                    		P_MRResultUnDeliverOrderSKUDescription(allod) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(allod));
                    	endif;
                    endfor;
                    
                    for(allod | P_SubV_UnMetOrderNonFullShipper(allod) > 0) do
                    	if (allod <= card(S_RawIndex) / 2) then
                    		P_MRResultUnDeliverOrderPcs(allod) := P_SubV_UnMetOrderNonFullShipper(allod) * P_SubInput_OrderPcs(allod);
                    		P_MRResultUnDeliverOrderSKU(allod) := P_RawSKUInSalesOrderVx(allod);
                    		P_MRResultUnDeliverOrderSKUDescription(allod) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(allod));
                    	else
                    !		P_MRResultUnDeliverOrderPcs(od - card(S_RawIndex) / 2) := P_SubV_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    !		P_MRResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    !		P_MRResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    
                    		P_MRResultUnDeliverOrderPcs(allod) := P_SubV_UnMetOrderNonFullShipper(allod) * P_SubInput_OrderPcs(allod);
                    		P_MRResultUnDeliverOrderSKU(allod) := P_RawRxSKUInSalesOrder(allod);
                    		P_MRResultUnDeliverOrderSKUDescription(allod) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(allod));
                    	endif;
                    endfor;
                    
                    
                    
                    ! Display color
                    P_ColorIntMR := 5;
                    for (UsedtkMr) do
                    	for (IndexColors) do
                    		P_TruckColorMR(UsedtkMr) := IndexColors + P_ColorIntMR;
                    		break;
                    	endfor;
                    
                    	P_ColorIntMR := P_ColorIntMR + 1;
                    	if (P_ColorIntMR = 15) then
                    		P_ColorIntMR := 5;
                    	endif;
                    endfor;
                    
                    DisplayAllTrucksMR;
                    
                    CalculateTransportationCostMR;
                }
            }
            DeclarationSection MilkRunMap {
                Set S_UsedTruckMR {
                    SubsetOf: S_RawTruck;
                    Index: UsedtkMr;
                }
                ElementParameter P_TruckColorMR {
                    IndexDomain: UsedtkMr;
                    Range: AllColors;
                }
                Parameter P_ColorIntMR;
                ElementParameter P_SelectedTruckMR {
                    Range: S_UsedTruckMR;
                }
                Parameter P_UIDisplayingTruckRouteMR {
                    IndexDomain: (UsedtkMr,rawlc1,rawlc2);
                }
            }
            Procedure DisplayAllTrucksMR {
                Body: {
                    empty P_UIDisplayingTruckRouteMR;
                    
                    for (rei) do
                    	P_UIDisplayingTruckRouteMR(P_MRResultTruck(rei), P_MRResultFromLocation(rei), P_MRResultToLocation(rei)) := 1;
                    endfor;
                }
            }
            Procedure DisplaySelectedTrucksMR {
                Body: {
                    empty P_UIDisplayingTruckRouteMR;
                    
                    for (rei | P_MRResultTruck(rei) = P_SelectedTruckMR) do
                    	P_UIDisplayingTruckRouteMR(P_MRResultTruck(rei), P_MRResultFromLocation(rei), P_MRResultToLocation(rei)) := 1;
                    endfor;
                }
            }
            DeclarationSection MilkRunSummaryCost {
                Parameter P_TripCostMR {
                    IndexDomain: UsedtkMr;
                }
                Parameter P_AdditionalDropOffCostMR {
                    IndexDomain: UsedtkMr;
                }
                Parameter P_SumCostMR {
                    IndexDomain: UsedtkMr;
                }
                ElementParameter P_FarthestLocationMR {
                    IndexDomain: UsedtkMr;
                    Range: S_RawLocation;
                }
                Parameter P_LongestDistanceMR {
                    IndexDomain: UsedtkMr;
                }
                Parameter P_TotalCostMR;
            }
            Procedure CalculateTransportationCostMR {
                Body: {
                    empty MilkRunSummaryCost;
                    
                    for (UsedtkMr) do
                    	for (rei | P_MRResultTruck(rei) = UsedtkMr and P_MRResultFromLocation(rei) = P_RawSelectedDC) do
                    		P_FarthestLocationMR(UsedtkMr) := P_MRResultToLocation(rei);
                    		P_LongestDistanceMR(UsedtkMr) := P_RawDistance(P_RawSelectedDC, P_FarthestLocationMR(UsedtkMr));
                    		break;
                    	endfor;
                    
                    	for (rei | P_MRResultTruck(rei) = UsedtkMr) do
                    		if (P_RawDistance(P_RawSelectedDC, P_MRResultToLocation(rei)) > P_LongestDistanceMR(UsedtkMr)) then
                    			P_FarthestLocationMR(UsedtkMr) := P_MRResultToLocation(rei);
                    			P_LongestDistanceMR(UsedtkMr) := P_RawDistance(P_RawSelectedDC, P_FarthestLocationMR(UsedtkMr));
                    		endif;		
                    	endfor;
                    
                    	P_TripCostMR(UsedtkMr) := P_LongestDistanceMR(UsedtkMr) * P_RawTransportationCostPerKm(P_RawTruckTruckType(UsedtkMr));
                    
                    	P_AdditionalDropOffCostMR(UsedtkMr) := 0;
                    	for (rei | P_MRResultTruck(rei) = UsedtkMr and
                    		   (not (P_MRResultToLocation(rei) = P_RawSelectedDC)) and
                    		   (not (P_MRResultToLocation(rei) = P_FarthestLocationMR(UsedtkMr)))
                    		   ) do
                    		if (P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei)) > 1000) then
                    			P_AdditionalDropOffCostMR(UsedtkMr) := P_AdditionalDropOffCostMR(UsedtkMr)
                    							       + P_RawAdditionalDropoffCostG1000(P_RawTruckTruckType(UsedtkMr))
                    								 * P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei));
                    		elseif  (P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei)) <= 1000
                    			and P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei)) > 500) then
                    			P_AdditionalDropOffCostMR(UsedtkMr) := P_AdditionalDropOffCostMR(UsedtkMr)
                    							       + P_RawAdditionalDropoffCostG500LE1000(P_RawTruckTruckType(UsedtkMr))
                    								 * P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei));
                    		elseif  (P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei)) <= 500
                    			and P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei)) > 120) then
                    			P_AdditionalDropOffCostMR(UsedtkMr) := P_AdditionalDropOffCostMR(UsedtkMr)
                    							       + P_RawAdditionalDropoffCostLE500(P_RawTruckTruckType(UsedtkMr))
                    								 * P_RawDistance(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei));
                    		elseif  (P_SubInput_IsSameCity(P_FarthestLocationMR(UsedtkMr), P_MRResultToLocation(rei))) then
                    			P_AdditionalDropOffCostMR(UsedtkMr) := P_AdditionalDropOffCostMR(UsedtkMr)
                    							       + P_SubInput_AdditionalDropoffCostSameCity(UsedtkMr);		
                    		else
                    			P_AdditionalDropOffCostMR(UsedtkMr) := P_AdditionalDropOffCostMR(UsedtkMr)
                    							       + P_SubInput_AdditionalDropoffCostDiffCity(UsedtkMr);
                    		endif;
                    	endfor;
                    
                    	P_SumCostMR(UsedtkMr) := P_TripCostMR(UsedtkMr) + P_AdditionalDropOffCostMR(UsedtkMr);
                    
                    	P_TotalCostMR := P_TotalCostMR + P_SumCostMR(UsedtkMr);
                    endfor;
                }
            }
        }
        Section LocalDeliveryResult {
            DeclarationSection LocalDeliveryResultDeclaration {
                ElementParameter P_LDResultIndex {
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_LDResultTruck {
                    IndexDomain: rei;
                    Range: S_RawTruck;
                }
                ElementParameter P_LDResultTruckSequence {
                    IndexDomain: rei;
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_LDResultFromLocation {
                    IndexDomain: rei;
                    Range: S_RawLocation;
                }
                ElementParameter P_LDResultFromCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_LDResultFromRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_LDResultToLocation {
                    IndexDomain: rei;
                    Range: S_RawLocation;
                }
                ElementParameter P_LDResultToCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_LDResultToRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_LDResultNextLocation {
                    Range: S_RawLocation;
                }
                ElementParameter P_LDResultDCDepartureDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                ElementParameter P_LDResultDepartureDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                Parameter P_LDResultDepartureTime {
                    IndexDomain: rei;
                }
                ElementParameter P_LDResultArrivalDate {
                    IndexDomain: rei;
                    Range: Cal_Days;
                }
                Parameter P_LDResultArrivalTime {
                    IndexDomain: rei;
                }
                ElementParameter P_LDResultOrderIndex {
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_LDResultOrderTruck {
                    IndexDomain: rei;
                    Range: S_RawTruck;
                }
                ElementParameter P_LDResultOrderTruckSequence {
                    IndexDomain: rei;
                    Range: S_ResultIndexSet;
                }
                ElementParameter P_LDResultOrderCustomer {
                    IndexDomain: rei;
                    Range: S_RawCustomer;
                }
                StringParameter P_LDResultOrderCustomerName {
                    IndexDomain: rei;
                }
                ElementParameter P_LDResultOrderCity {
                    IndexDomain: rei;
                    Range: S_RawCity;
                }
                ElementParameter P_LDResultOrderRegion {
                    IndexDomain: rei;
                    Range: S_RawRegion;
                }
                ElementParameter P_LDResultOrder {
                    IndexDomain: rei;
                    Range: S_RawIndex;
                }
                ElementParameter P_LDResultOrderSKUCategory {
                    IndexDomain: rei;
                    Range: S_RawSKUCategory;
                }
                ElementParameter P_LDResultOrderSKU {
                    IndexDomain: rei;
                    Range: S_RawSKU;
                }
                StringParameter P_LDResultOrderSKUDescription {
                    IndexDomain: rei;
                }
                Parameter P_LDResultOrderShipper {
                    IndexDomain: rei;
                }
                Parameter P_LDResultOrderPcs {
                    IndexDomain: rei;
                }
                Parameter P_LDResultTotalTransportationCost;
                Parameter P_LDResultTotalAdditionalCost;
                Parameter P_LDResultTotalTimeSpan;
                Parameter P_LDResultTotalUnmetOrder;
                Parameter P_LDResultObjective;
                Parameter P_LDResultTotalCost;
                Parameter P_LDResultUnDeliverOrderShipper {
                    IndexDomain: rawindex;
                }
                Parameter P_LDResultUnDeliverOrderPcs {
                    IndexDomain: rawindex;
                }
                ElementParameter P_LDResultUnDeliverOrderSKU {
                    IndexDomain: rawindex;
                    Range: S_RawSKU;
                }
                StringParameter P_LDResultUnDeliverOrderSKUDescription {
                    IndexDomain: rawindex;
                }
            }
            Procedure PassLocalDeliveryResult {
                Body: {
                    empty LocalDeliveryResultDeclaration;
                    empty LocalDeliveryMap;
                    
                    ! Truck Itinerary table and Truck Orders table
                    P_LDResultIndex := 1;
                    P_LDResultOrderIndex := 1;
                    
                    for ((tk, lc) | V_Travel(tk, P_RawSelectedLocalDeliveryId, lc) = 1) do
                    	S_UsedTruckLD := S_UsedTruckLD + tk;
                    
                    	P_LDResultTruck(P_LDResultIndex) := tk;
                    	P_LDResultTruckSequence(P_LDResultIndex) := 1;
                    
                    	P_LDResultFromLocation(P_LDResultIndex) := P_RawSelectedLocalDeliveryId;
                    	P_LDResultFromCity(P_LDResultIndex) := P_LDResultFromLocation(P_LDResultIndex);
                    	P_LDResultFromRegion(P_LDResultIndex) := P_RawCityRegion(P_LDResultFromCity(P_LDResultIndex));
                    
                    	P_LDResultToLocation(P_LDResultIndex) := lc;
                    	P_LDResultToCity(P_LDResultIndex) := P_RawCustomerCity(P_LDResultToLocation(P_LDResultIndex));
                    	P_LDResultToRegion(P_LDResultIndex) := P_RawCityRegion(P_LDResultToCity(P_LDResultIndex));
                    
                    	P_LDResultDepartureDate(P_LDResultIndex) := P_RawLocalDeliveryStartDate + floor(V_DepartureTime(tk, P_RawSelectedLocalDeliveryId) / 24);
                    	P_LDResultDepartureTime(P_LDResultIndex) := mod(V_DepartureTime(tk, P_RawSelectedLocalDeliveryId), 24);
                    
                    	P_LDResultArrivalDate(P_LDResultIndex) := P_RawLocalDeliveryStartDate 
                    						  + floor((V_DepartureTime(tk, P_RawSelectedLocalDeliveryId) + P_TransportationTime(tk, P_RawSelectedLocalDeliveryId, lc)) / 24);
                    	P_LDResultArrivalTime(P_LDResultIndex) := mod((V_DepartureTime(tk, P_RawSelectedLocalDeliveryId) + P_TransportationTime(tk, P_RawSelectedLocalDeliveryId, lc)), 24);
                    
                    	P_LDResultOrderTruckSequence(P_LDResultOrderIndex) := 1;
                    	for(od | V_AssignOrder(od, tk) = 1 and P_OrderCustomer(od) = lc) do
                    		P_LDResultOrderTruck(P_LDResultOrderIndex) := tk;
                    		P_LDResultDCDepartureDate(P_LDResultOrderIndex) := P_RawLocalDeliveryStartDate + floor(V_DepartureTime(tk, P_RawSelectedLocalDeliveryId) / 24);
                    		P_LDResultOrderCustomer(P_LDResultOrderIndex) := lc;
                    
                    		if (od <= card(S_RawIndex) / 2) then
                    			P_LDResultOrder(P_LDResultOrderIndex) := od;
                    			P_LDResultOrderCustomerName(P_LDResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(od);
                    		else
                    			P_LDResultOrder(P_LDResultOrderIndex) := od - card(S_RawIndex) / 2;
                    			P_LDResultOrderCustomerName(P_LDResultOrderIndex) := lc;
                    		endif;
                    
                    		P_LDResultOrderCity(P_LDResultOrderIndex) := P_RawCustomerCity(P_LDResultOrderCustomer(P_LDResultOrderIndex));
                    		P_LDResultOrderRegion(P_LDResultOrderIndex) := P_RawCityRegion(P_LDResultOrderCity(P_LDResultOrderIndex));
                    
                    		P_LDResultOrderSKUCategory(P_LDResultOrderIndex) := P_RawSKUCategory(P_OrderSKU(od));
                    		P_LDResultOrderSKU(P_LDResultOrderIndex) := P_OrderSKU(od);
                    		P_LDResultOrderSKUDescription(P_LDResultOrderIndex) := P_RawSKUDescription(P_OrderSKU(od));
                    		P_LDResultOrderShipper(P_LDResultOrderIndex) := V_AssignOrderShipper(od, tk);
                    		P_LDResultOrderPcs(P_LDResultOrderIndex) := V_AssignOrderNonFullShipper(od, tk) * P_OrderPcs(od);
                    
                    		if (not (P_LDResultOrderTruckSequence(P_LDResultOrderIndex) = 1)) then
                    			P_LDResultOrderTruckSequence(P_LDResultOrderIndex) := P_LDResultOrderTruckSequence(P_LDResultOrderIndex - 1) + 1;
                    		endif;
                    		P_LDResultOrderIndex := P_LDResultOrderIndex + 1;
                    	endfor;
                    
                    	P_LDResultNextLocation := lc;
                    	P_LDResultIndex := P_LDResultIndex + 1;
                    
                    	while (not (P_LDResultNextLocation = P_RawSelectedLocalDeliveryId)) do
                    		for(lc2 | V_Travel(tk, P_LDResultNextLocation, lc2) = 1) do
                    			S_UsedTruckLD := S_UsedTruckLD + tk;
                    
                    			P_LDResultTruck(P_LDResultIndex) := tk;
                    			P_LDResultTruckSequence(P_LDResultIndex) := P_LDResultTruckSequence(P_LDResultIndex - 1) + 1;
                    
                    			P_LDResultFromLocation(P_LDResultIndex) := P_LDResultNextLocation;
                    			P_LDResultFromCity(P_LDResultIndex) := P_RawCustomerCity(P_LDResultFromLocation(P_LDResultIndex));
                    			P_LDResultFromRegion(P_LDResultIndex) := P_RawCityRegion(P_LDResultFromCity(P_LDResultIndex));			
                    
                    			P_LDResultToLocation(P_LDResultIndex) := lc2;
                    			if (not (P_LDResultToLocation(P_LDResultIndex) in S_RawLocalDeliveryId)) then
                    				P_LDResultToCity(P_LDResultIndex) := P_RawCustomerCity(P_LDResultToLocation(P_LDResultIndex));
                    			else
                    				P_LDResultToCity(P_LDResultIndex) := P_LDResultToLocation(P_LDResultIndex);
                    			endif;
                    			P_LDResultToRegion(P_LDResultIndex) := P_RawCityRegion(P_LDResultToCity(P_LDResultIndex));
                    
                    			P_LDResultDepartureDate(P_LDResultIndex) := P_RawLocalDeliveryStartDate + floor(V_DepartureTime(tk, P_LDResultNextLocation) / 24);
                    			P_LDResultDepartureTime(P_LDResultIndex) := mod(V_DepartureTime(tk, P_LDResultNextLocation), 24);
                    
                    			P_LDResultArrivalDate(P_LDResultIndex) := P_RawLocalDeliveryStartDate
                    								  + floor((V_DepartureTime(tk, P_LDResultNextLocation) + P_TransportationTime(tk, P_LDResultNextLocation, lc2)) / 24);
                    			P_LDResultArrivalTime(P_LDResultIndex) := mod((V_DepartureTime(tk, P_LDResultNextLocation) + P_TransportationTime(tk, P_LDResultNextLocation, lc2)), 24);
                    
                    			if (not (lc2 = P_RawSelectedLocalDeliveryId)) then
                    				for(od | V_AssignOrder(od, tk) = 1 and P_OrderCustomer(od) = lc2) do
                    					P_LDResultOrderTruck(P_LDResultOrderIndex) := tk;
                    					P_LDResultDCDepartureDate(P_LDResultOrderIndex) := P_RawLocalDeliveryStartDate + floor(V_DepartureTime(tk, P_RawSelectedLocalDeliveryId) / 24);
                    					P_LDResultOrderCustomer(P_LDResultOrderIndex) := lc2;
                    
                    					if (od <= card(S_RawIndex) / 2) then
                    						P_LDResultOrder(P_LDResultOrderIndex) := od;
                    						P_LDResultOrderCustomerName(P_LDResultOrderIndex) := P_RawCustomerNameInSalesOrderVx(od);
                    					else
                    						P_LDResultOrder(P_LDResultOrderIndex) := od - card(S_RawIndex) / 2;
                    						P_LDResultOrderCustomerName(P_LDResultOrderIndex) := lc2;
                    					endif;
                    
                    					P_LDResultOrderCity(P_LDResultOrderIndex) := P_RawCustomerCity(P_LDResultOrderCustomer(P_LDResultOrderIndex));
                    					P_LDResultOrderRegion(P_LDResultOrderIndex) := P_RawCityRegion(P_LDResultOrderCity(P_LDResultOrderIndex));	
                    
                    					P_LDResultOrderSKUCategory(P_LDResultOrderIndex) := P_RawSKUCategory(P_OrderSKU(od));
                    					P_LDResultOrderSKU(P_LDResultOrderIndex) := P_OrderSKU(od);
                    					P_LDResultOrderSKUDescription(P_LDResultOrderIndex) := P_RawSKUDescription(P_OrderSKU(od));
                    					P_LDResultOrderShipper(P_LDResultOrderIndex) := V_AssignOrderShipper(od, tk);
                    					P_LDResultOrderPcs(P_LDResultOrderIndex) := V_AssignOrderNonFullShipper(od, tk) * P_OrderPcs(od);
                    
                    					P_LDResultOrderTruckSequence(P_LDResultOrderIndex) := P_LDResultOrderTruckSequence(P_LDResultOrderIndex - 1) + 1;
                    					P_LDResultOrderIndex := P_LDResultOrderIndex + 1;
                    				endfor;
                    			endif;
                    		endfor;
                    
                    		P_LDResultNextLocation := P_LDResultToLocation(P_LDResultIndex);
                    		P_LDResultIndex := P_LDResultIndex + 1;
                    	endwhile;
                    endfor;
                    
                    
                    
                    ! Cost Summary table
                    P_LDResultTotalTransportationCost := V_TotalTransportationCost;
                    P_LDResultTotalAdditionalCost := V_TotalAdditionalCost;
                    P_LDResultTotalTimeSpan := V_TotalTimeSpan;
                    P_LDResultTotalUnmetOrder := V_TotalUnMetOrder;
                    P_LDResultObjective := V_Objective;
                    
                    P_LDResultTotalCost := P_LDResultTotalTransportationCost + P_LDResultTotalAdditionalCost;
                    
                    
                    
                    ! UnDelivered Order table
                    for(od | V_UnMetOrderShipper(od) > 0) do
                    	if (od <= card(S_RawIndex) / 2) then
                    		P_LDResultUnDeliverOrderShipper(od) := V_UnMetOrderShipper(od);
                    		P_LDResultUnDeliverOrderSKU(od) := P_RawSKUInSalesOrderVx(od);
                    		P_LDResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(od));
                    	else
                    		P_LDResultUnDeliverOrderShipper(od - card(S_RawIndex) / 2) := V_UnMetOrderShipper(od);
                    		P_LDResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    		P_LDResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    	endif;
                    endfor;
                    
                    for(od | V_UnMetOrderNonFullShipper(od) > 0) do
                    	if (od <= card(S_RawIndex) / 2) then
                    		P_LDResultUnDeliverOrderPcs(od) := V_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    		P_LDResultUnDeliverOrderSKU(od) := P_RawSKUInSalesOrderVx(od);
                    		P_LDResultUnDeliverOrderSKUDescription(od) := P_RawSKUDescription(P_RawSKUInSalesOrderVx(od));		
                    	else
                    		P_LDResultUnDeliverOrderPcs(od - card(S_RawIndex) / 2) := V_UnMetOrderNonFullShipper(od) * P_OrderPcs(od);
                    		P_LDResultUnDeliverOrderSKU(od - card(S_RawIndex) / 2) := P_RawRxSKUInSalesOrder(od);
                    		P_LDResultUnDeliverOrderSKUDescription(od - card(S_RawIndex) / 2) := P_RawSKUDescription(P_RawRxSKUInSalesOrder(od));
                    	endif;
                    endfor;
                    
                    
                    
                    ! Display color
                    P_ColorIntLD := 5;
                    for (UsedtkLd) do
                    	for (IndexColors) do
                    		P_TruckColorLD(UsedtkLd) := IndexColors + P_ColorIntLD;
                    		break;
                    	endfor;
                    
                    	P_ColorIntLD := P_ColorIntLD + 1;
                    	if (P_ColorIntLD = 15) then
                    		P_ColorIntLD := 5;
                    	endif;
                    endfor;
                    
                    DisplayAllTrucksLD;
                    
                    CalculateTransportationCostLD;
                }
            }
            DeclarationSection LocalDeliveryMap {
                Set S_UsedTruckLD {
                    SubsetOf: S_RawTruck;
                    Index: UsedtkLd;
                }
                ElementParameter P_TruckColorLD {
                    IndexDomain: UsedtkLd;
                    Range: AllColors;
                }
                Parameter P_ColorIntLD;
                ElementParameter P_SelectedTruckLD {
                    Range: S_UsedTruckLD;
                }
                Parameter P_UIDisplayingTruckRouteLD {
                    IndexDomain: (UsedtkLd,rawlc1,rawlc2);
                }
            }
            Procedure DisplayAllTrucksLD {
                Body: {
                    empty P_UIDisplayingTruckRouteLD;
                    
                    for (rei) do
                    	P_UIDisplayingTruckRouteLD(P_LDResultTruck(rei), P_LDResultFromLocation(rei), P_LDResultToLocation(rei)) := 1;
                    endfor;
                }
            }
            Procedure DisplaySelectedTrucksLD {
                Body: {
                    empty P_UIDisplayingTruckRouteLD;
                    
                    for (rei | P_LDResultTruck(rei) = P_SelectedTruckLD) do
                    	P_UIDisplayingTruckRouteLD(P_LDResultTruck(rei), P_LDResultFromLocation(rei), P_LDResultToLocation(rei)) := 1;
                    endfor;
                }
            }
            DeclarationSection LocalDeliverySummaryCost {
                Parameter P_TripCostLD {
                    IndexDomain: UsedtkLd;
                }
                Parameter P_AdditionalDropOffCostLD {
                    IndexDomain: UsedtkLd;
                }
                Parameter P_SumCostLD {
                    IndexDomain: UsedtkLd;
                }
                ElementParameter P_FarthestLocationLD {
                    IndexDomain: UsedtkLd;
                    Range: S_RawLocation;
                }
                Parameter P_LongestDistanceLD {
                    IndexDomain: UsedtkLd;
                }
                Parameter P_TotalCostLD;
            }
            Procedure CalculateTransportationCostLD {
                Body: {
                    empty LocalDeliverySummaryCost;
                    
                    for (UsedtkLd) do
                    	for (rei | P_LDResultTruck(rei) = UsedtkLd and P_LDResultFromLocation(rei) = P_RawSelectedLocalDeliveryId) do
                    		P_FarthestLocationLD(UsedtkLd) := P_LDResultToLocation(rei);
                    		P_LongestDistanceLD(UsedtkLd) := P_RawDistance(P_RawSelectedLocalDeliveryId, P_FarthestLocationLD(UsedtkLd));
                    		break;
                    	endfor;
                    
                    	for (rei | P_LDResultTruck(rei) = UsedtkLd) do
                    		if (P_RawDistance(P_RawSelectedLocalDeliveryId, P_LDResultToLocation(rei)) > P_LongestDistanceLD(UsedtkLd)) then
                    			P_FarthestLocationLD(UsedtkLd) := P_LDResultToLocation(rei);
                    			P_LongestDistanceLD(UsedtkLd) := P_RawDistance(P_RawSelectedLocalDeliveryId, P_FarthestLocationLD(UsedtkLd));
                    		endif;		
                    	endfor;
                    
                    	P_TripCostLD(UsedtkLd) := P_LongestDistanceLD(UsedtkLd) * P_RawTransportationCostPerKm(P_RawTruckTruckType(UsedtkLd));
                    
                    	P_AdditionalDropOffCostLD(UsedtkLd) := 0;
                    	for (rei | P_LDResultTruck(rei) = UsedtkLd and
                    		   (not (P_LDResultToLocation(rei) = P_RawSelectedLocalDeliveryId)) and
                    		   (not (P_LDResultToLocation(rei) = P_FarthestLocationLD(UsedtkLd)))
                    		   ) do
                    		if (P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei)) > 1000) then
                    			P_AdditionalDropOffCostLD(UsedtkLd) := P_AdditionalDropOffCostLD(UsedtkLd)
                    							       + P_RawAdditionalDropoffCostG1000(P_RawTruckTruckType(UsedtkLd))
                    								 * P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei));
                    		elseif  (P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei)) <= 1000
                    			and P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei)) > 500) then
                    			P_AdditionalDropOffCostLD(UsedtkLd) := P_AdditionalDropOffCostLD(UsedtkLd)
                    							       + P_RawAdditionalDropoffCostG500LE1000(P_RawTruckTruckType(UsedtkLd))
                    								 * P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei));
                    		elseif  (P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei)) <= 500
                    			and P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei)) > 120) then
                    			P_AdditionalDropOffCostLD(UsedtkLd) := P_AdditionalDropOffCostLD(UsedtkLd)
                    							       + P_RawAdditionalDropoffCostLE500(P_RawTruckTruckType(UsedtkLd))
                    								 * P_RawDistance(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei));
                    		elseif  (P_IsSameCity(P_FarthestLocationLD(UsedtkLd), P_LDResultToLocation(rei))) then
                    			P_AdditionalDropOffCostLD(UsedtkLd) := P_AdditionalDropOffCostLD(UsedtkLd)
                    							       + P_AdditionalDropoffCostSameCity(UsedtkLd);		
                    		else
                    			P_AdditionalDropOffCostLD(UsedtkLd) := P_AdditionalDropOffCostLD(UsedtkLd)
                    							       + P_AdditionalDropoffCostDiffCity(UsedtkLd);
                    		endif;
                    	endfor;
                    
                    	P_SumCostLD(UsedtkLd) := P_TripCostLD(UsedtkLd) + P_AdditionalDropOffCostLD(UsedtkLd);
                    
                    	P_TotalCostLD := P_TotalCostLD + P_SumCostLD(UsedtkLd);
                    endfor;
                }
            }
        }
    }
    Section UISection {
        Section UI_Color_Setting {
            DeclarationSection UI_Color_Declaration {
                ElementParameter P_Color_InputData {
                    Range: AllColors;
                    InitialData: 'Black';
                }
                ElementParameter P_Color_ParameterSetting {
                    Range: AllColors;
                    InitialData: 'Black';
                }
                ElementParameter P_Color_DerivedData {
                    Range: AllColors;
                    InitialData: 'Black';
                }
                ElementParameter P_Color_Result {
                    Range: AllColors;
                    InitialData: 'Black';
                }
            }
            Procedure Click_InputData {
                Body: {
                    P_Color_InputData := 'Blue';
                    
                    P_Color_ParameterSetting := 'Black';
                    P_Color_DerivedData := 'Black';
                    P_Color_Result := 'Black';
                }
            }
            Procedure Click_ParameterSetting {
                Body: {
                    P_Color_ParameterSetting := 'Blue';
                    
                    P_Color_InputData := 'Black';
                    P_Color_DerivedData := 'Black';
                    P_Color_Result := 'Black';
                }
            }
            Procedure Click_DerivedData {
                Body: {
                    P_Color_DerivedData := 'Blue';
                    
                    P_Color_InputData := 'Black';
                    P_Color_ParameterSetting := 'Black';
                    P_Color_Result := 'Black';
                }
            }
            Procedure Click_Result {
                Body: {
                    P_Color_Result := 'Blue';
                    
                    P_Color_InputData := 'Black';
                    P_Color_ParameterSetting := 'Black';
                    P_Color_DerivedData := 'Black';
                }
            }
        }
        Section Add_New_Customer {
            StringParameter P_NewCustomerString;
            ElementParameter P_NewCustomer {
                Range: S_RawCustomer;
            }
            Parameter P_NewCustomerLatitude;
            Parameter P_NewCustomerLongitude;
            ElementParameter P_NewCustomerCity {
                Range: S_RawCity;
            }
            StringParameter P_NewCustomerDescription;
            Procedure AddNewCustomer {
                Body: {
                    if (P_NewCustomerString = "") then
                    	dialogMessage("Customer cannot be empty. Please provide the customer Id.", "Error Message");
                    endif;
                    
                    if (P_NewCustomerLatitude < 3 or P_NewCustomerLatitude > 54) then
                    	dialogMessage("Latitude is not in the correct range (3-54). Please change the latitude.", "Error Message");
                    endif;
                    
                    if (P_NewCustomerLongitude < 73 or P_NewCustomerLongitude > 136) then
                    	dialogMessage("Longitude is not in the correct range (73-136). Please change the longitude.", "Error Message");
                    endif;
                    
                    if (not (P_NewCustomerCity in S_RawCity)) then
                    	dialogMessage("City cannot be empty. Please choose the city from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewCustomerString = "")
                        and P_NewCustomerLatitude >= 3 and P_NewCustomerLatitude <= 54
                        and P_NewCustomerLongitude >= 73 and P_NewCustomerLongitude <= 136
                        and P_NewCustomerCity in S_RawCity
                        ) then
                        	P_NewCustomer := StringToElement(S_RawCustomer, P_NewCustomerString, 1);
                    	P_RawCustomerLatitude(P_NewCustomer) := P_NewCustomerLatitude;
                    	P_RawCustomerLongitude(P_NewCustomer) := P_NewCustomerLongitude;
                    	P_RawCustomerCity(P_NewCustomer) := P_NewCustomerCity;
                    
                    	P_RawCustomerDescription(P_NewCustomer) := P_NewCustomerDescription;
                    
                    	dialogMessage("The new customer has been added.", "Success Message");
                    endif;
                }
            }
        }
        Section Add_New_Local_Delivery {
            StringParameter P_NewLDString;
            ElementParameter P_NewLD {
                Range: S_RawLocalDeliveryId;
            }
            Parameter P_NewLDLatitude;
            Parameter P_NewLDLongitude;
            ElementParameter P_NewLDCity {
                Range: S_RawCity;
            }
            Procedure AddNewLD {
                Body: {
                    if (P_NewLDString = "") then
                    	dialogMessage("Local Delivery Id cannot be empty. Please provide the Local Delivery Id.", "Error Message");
                    endif;
                    
                    if (P_NewLDLatitude < 3 or P_NewLDLatitude > 54) then
                    	dialogMessage("Latitude is not in the correct range (3-54). Please change the latitude.", "Error Message");
                    endif;
                    
                    if (P_NewLDLongitude < 73 or P_NewLDLongitude > 136) then
                    	dialogMessage("Longitude is not in the correct range (73-136). Please change the longitude.", "Error Message");
                    endif;
                    
                    if (not (P_NewLDCity in S_RawCity)) then
                    	dialogMessage("City cannot be empty. Please choose the city from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewLDString = "")
                        and P_NewLDLatitude >= 3 and P_NewLDLatitude <= 54
                        and P_NewLDLongitude >= 73 and P_NewLDLongitude <= 136
                        and P_NewLDCity in S_RawCity
                        ) then
                        	P_NewLD := StringToElement(S_RawLocalDeliveryId, P_NewLDString, 1);
                    	P_RawLocalDeliveryIdLatitude(P_NewLD) := P_NewLDLatitude;
                    	P_RawLocalDeliveryIdLongitude(P_NewLD) := P_NewLDLongitude;
                    	P_RawLocalDeliveryCity(P_NewLD) := P_NewLDCity;
                    
                    	for (rawsn | P_RawLDDayofWeek(first(S_RawLocalDeliveryId), rawsn) > 0) do
                    		P_RawLDDayofWeek(P_NewLD, rawsn) := P_RawLDDayofWeek(first(S_RawLocalDeliveryId), rawsn);
                    		P_RawLDStartOfTimeWindow(P_NewLD, rawsn) := P_RawLDStartOfTimeWindow(first(S_RawLocalDeliveryId), rawsn);
                    		P_RawLDEndOfTimeWindow(P_NewLD, rawsn) := P_RawLDEndOfTimeWindow(first(S_RawLocalDeliveryId), rawsn);
                    	endfor;
                    
                    	dialogMessage("The new Local Delivery Id has been added.", "Success Message");
                    endif;
                }
            }
        }
        Section Add_New_Truck_Type {
            StringParameter P_NewTruckTypeString;
            ElementParameter P_NewTruckType {
                Range: S_RawTruckType;
            }
            ElementParameter P_NewTruckTypeTM {
                Range: S_RawTransportationMode;
            }
            Parameter P_NewTruckTypeVolumeCap;
            Parameter P_NewTruckTypeWeightCap;
            Parameter P_NewTruckTypeTravelSpeed;
            Parameter P_NewTruckTypeMaxTravelDay;
            Parameter P_NewTruckTypeMaxCustomerPerTrip;
            Parameter P_NewTruckTypeTransportationCostPerKm;
            Parameter P_NewTruckTypeAddDropCostDiffCity;
            Parameter P_NewTruckTypeAddDropCostSameCity;
            StringParameter P_NewTruckTypeDescription;
            Procedure AddNewTruckType {
                Body: {
                    if (P_NewTruckTypeString = "") then
                    	dialogMessage("Truck type cannot be empty. Please provide the truck type.", "Error Message");
                    endif;
                    
                    if (not (P_NewTruckTypeTM in S_RawTransportationMode)) then
                    	dialogMessage("Transportation mode cannot be empty. Please choose the transportation mode from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewTruckTypeString = "")
                        and P_NewTruckTypeTM in S_RawTransportationMode
                        ) then
                        	P_NewTruckType := StringToElement(S_RawTruckType, P_NewTruckTypeString, 1);
                    	P_RawTMofTruckType(P_NewTruckType) := P_NewTruckTypeTM;
                    	P_RawVolumeCapacity(P_NewTruckType) := P_NewTruckTypeVolumeCap;
                    	P_RawWeightCapacity(P_NewTruckType) := P_NewTruckTypeWeightCap;
                    	P_RawTravelSpeed(P_NewTruckType) := P_NewTruckTypeTravelSpeed;
                    	P_RawMaxTravelDay(P_NewTruckType) := P_NewTruckTypeMaxTravelDay;
                    	P_RawMaxCustomerPerTrip(P_NewTruckType) := P_NewTruckTypeMaxCustomerPerTrip;
                    	P_RawTransportationCostPerKm(P_NewTruckType) := P_NewTruckTypeTransportationCostPerKm;
                    	P_RawAdditionalDropoffCostDiffCity(P_NewTruckType) := P_NewTruckTypeAddDropCostDiffCity;
                    	P_RawAdditionalDropoffCostSameCity(P_NewTruckType) := P_NewTruckTypeAddDropCostSameCity;
                    	P_RawTruckTypeDescription(P_NewTruckType) := P_NewTruckTypeDescription;
                    
                    	dialogMessage("The new truck type has been added.", "Success Message");
                    endif;
                }
            }
        }
        Section Add_New_Truck {
            StringParameter P_NewTruckString;
            ElementParameter P_NewTruck {
                Range: S_RawTruck;
            }
            ElementParameter P_NewTruckOwnerId {
                Range: S_RawDCAndLD;
            }
            ElementParameter P_NewTruckTruckType {
                Range: S_RawTruckType;
            }
            Procedure AddNewTruck {
                Body: {
                    if (P_NewTruckString = "") then
                    	dialogMessage("Truck cannot be empty. Please provide the truck.", "Error Message");
                    endif;
                    
                    if (not (P_NewTruckOwnerId in S_RawDCAndLD)) then
                    	dialogMessage("Truck owner cannot be empty. Please choose the truck owner from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewTruckTruckType in S_RawTruckType)) then
                    	dialogMessage("Truck type cannot be empty. Please choose the truck type from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewTruckString = "")
                        and P_NewTruckOwnerId in S_RawDCAndLD
                        and P_NewTruckTruckType in S_RawTruckType
                        ) then
                        	P_NewTruck := StringToElement(S_RawTruck, P_NewTruckString, 1);
                    	P_RawTruckOwnerId(P_NewTruck) := P_NewTruckOwnerId;
                    	P_RawTruckTruckType(P_NewTruck) := P_NewTruckTruckType;
                    
                    	dialogMessage("The new truck has been added.", "Success Message");
                    endif;
                }
            }
        }
        Section Add_New_Vx_Order {
            ElementParameter P_NewVxOrderCity {
                Range: S_RawCity;
            }
            StringParameter P_NewVxOrderStatus;
            StringParameter P_NewVxOrderId;
            ElementParameter P_NewVxOrderDate {
                Range: Cal_Days;
            }
            ElementParameter P_NewVxOrderCustomer {
                Range: S_RawCustomer;
            }
            StringParameter P_NewVxOrderCustomerName;
            ElementParameter P_NewVxOrderSKU {
                Range: S_RawSKU;
            }
            Parameter P_NewVxOrderQuantity;
            ElementParameter P_NewVxOrderDeliveryWindowEnd {
                Range: Cal_Days;
            }
            ElementParameter P_NewVxOrderDCDivision {
                Range: S_RawDCDivision;
            }
            Parameter P_CurrentMaxVxOrderIndex;
            Procedure AddNewVxOrder {
                Body: {
                    if (P_NewVxOrderStatus = "") then
                    	dialogMessage("Order status cannot be empty. Please provide the order status.", "Error Message");
                    endif;
                    
                    if (P_NewVxOrderId = "") then
                    	dialogMessage("Order id cannot be empty. Please provide the order id.", "Error Message");
                    endif;
                    
                    if (not (P_NewVxOrderDate in Cal_Days)) then
                    	dialogMessage("Order date cannot be empty. Please choose the order date from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewVxOrderCustomer in S_RawCustomer)) then
                    	dialogMessage("Order customerId cannot be empty. Please choose the customerId from the list.", "Error Message");
                    endif;
                    
                    if (P_NewVxOrderCustomerName = "") then
                    	dialogMessage("Order customer name cannot be empty. Please provide the order customer name.", "Error Message");
                    endif;
                    
                    if (not (P_NewVxOrderSKU in S_RawSKU)) then
                    	dialogMessage("Order SKU cannot be empty. Please choose the SKU from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewVxOrderDCDivision in S_RawDCDivision)) then
                    	dialogMessage("Order DC Division cannot be empty. Please choose the DC Division from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewVxOrderStatus = "")
                        and (not (P_NewVxOrderId = ""))
                        and P_NewVxOrderDate in Cal_Days
                        and P_NewVxOrderCustomer in S_RawCustomer
                        and (not (P_NewVxOrderCustomerName = ""))    
                        and P_NewVxOrderSKU in S_RawSKU
                        and P_NewVxOrderDCDivision in S_RawDCDivision    
                        ) then
                            P_CurrentMaxVxOrderIndex := 0;
                        	for (rawindex | P_RawSKUInSalesOrderVx(rawindex) in S_RawSKU) do
                        		if (P_CurrentMaxVxOrderIndex < rawindex) then
                        			P_CurrentMaxVxOrderIndex := rawindex;
                        		endif;
                        	endfor;
                    
                        	P_RawCityInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderCity;
                        	P_RawStatusInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderStatus;
                        	P_RawOrderIdInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderId;
                        	P_RawOrderDateInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderDate;
                        	P_RawCustomerInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderCustomer;
                        	P_RawCustomerNameInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderCustomerName;
                        	P_RawSKUInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderSKU;
                        	P_RawQuantityInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderQuantity;
                        	P_RawLatestDateInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderDeliveryWindowEnd;
                        	P_RawLatestDeliveryDateInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderDeliveryWindowEnd;
                        	P_RawDCDivisionStringInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderDCDivision;
                        	P_RawDCDivisionInSalesOrderVx(P_CurrentMaxVxOrderIndex + 1) := P_NewVxOrderDCDivision;
                    
                    	dialogMessage("The new Vx order has been added.", "Success Message");
                    endif;
                }
            }
        }
        Section Add_New_Rx_Order {
            ElementParameter P_NewRxOrderId {
                Range: S_RawIndex;
            }
            ElementParameter P_NewRxOrderDC {
                Range: S_RawDC;
            }
            ElementParameter P_NewRxOrderCustomer {
                Range: S_RawCustomer;
            }
            ElementParameter P_NewRxOrderSKU {
                Range: S_RawSKU;
            }
            StringParameter P_NewRxOrderStatus;
            Parameter P_NewRxOrderQuantity;
            ElementParameter P_NewRxOrderLDId {
                Range: S_RawLocalDeliveryId;
            }
            ElementParameter P_NewRxOrderDeliveryWindowStart {
                Range: Cal_Days;
            }
            ElementParameter P_NewRxOrderDeliveryWindowEnd {
                Range: Cal_Days;
            }
            Parameter P_CurrentMaxRxOrderIndex;
            Procedure AddNewRxOrder {
                Body: {
                    !if (not (P_NewRxOrderId in S_RawIndex)) then
                    !	dialogMessage("Order id cannot be empty. Please provide the order id.", "Error Message");
                    !endif;
                    
                    if (not (P_NewRxOrderDC in S_RawDC)) then
                    	dialogMessage("Order DC cannot be empty. Please choose the DC from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewRxOrderCustomer in S_RawCustomer)) then
                    	dialogMessage("Order customerId cannot be empty. Please choose the customerId from the list.", "Error Message");
                    endif;
                    
                    if (not (P_NewRxOrderSKU in S_RawSKU)) then
                    	dialogMessage("Order SKU cannot be empty. Please choose the SKU from the list.", "Error Message");
                    endif;
                    
                    if (P_NewRxOrderStatus = "") then
                    	dialogMessage("Order status cannot be empty. Please provide the order status.", "Error Message");
                    endif;
                    
                    if (not (P_NewRxOrderDeliveryWindowStart in Cal_Days)) then
                    	dialogMessage("Order preferred delivery window start date cannot be empty. Please provide the preferred delivery window start date.", "Error Message");
                    endif;
                    
                    if (not (P_NewRxOrderDeliveryWindowEnd in Cal_Days)) then
                    	dialogMessage("Order preferred delivery window end date cannot be empty. Please provide the preferred delivery window end date.", "Error Message");
                    endif;
                    
                    if (!P_NewRxOrderId in S_RawIndex)
                        P_NewRxOrderDC in S_RawDC
                        and P_NewRxOrderCustomer in S_RawCustomer
                        and P_NewRxOrderSKU in S_RawSKU
                        and (not (P_NewRxOrderStatus = ""))
                        and P_NewRxOrderDeliveryWindowStart in Cal_Days
                        and P_NewRxOrderDeliveryWindowEnd in Cal_Days   
                        ) then
                            P_CurrentMaxRxOrderIndex := 0;
                        	for (rawindex | P_RawRxSKUInSalesOrder(rawindex) in S_RawSKU) do
                        		if (P_CurrentMaxRxOrderIndex < rawindex) then
                        			P_CurrentMaxRxOrderIndex := rawindex;
                        		endif;
                        	endfor;
                    
                        	P_RawRxDCInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderDC;
                        	P_RawRxCustomerInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderCustomer;
                        	P_RawRxSKUInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderSKU;
                        	P_RawRxStatusInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderStatus;
                        	!P_RawRxUnitIdInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := ;
                        	P_RawRxQuantityInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderQuantity;
                        	P_RawRxLocalDeliveryIdInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderLDId;
                        	P_RawRxPreferredDeliveryStartDateInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderDeliveryWindowStart;
                        	P_RawRxPreferredDeliveryEndDateInSalesOrder(P_CurrentMaxRxOrderIndex + 1) := P_NewRxOrderDeliveryWindowEnd;
                    
                    	dialogMessage("The new Rx order has been added.", "Success Message");
                    endif;
                }
            }
        }
    }
    Procedure MainInitialization {
        Comment: "Add initialization statements here that do NOT require any library being initialized already.";
    }
    Procedure PostMainInitialization {
        Comment: {
            "Add initialization statements here that require that the libraries are already initialized properly,
            or add statements that require the Data Management module to be initialized."
        }
    }
    Procedure MainExecution;
    Procedure PreMainTermination {
        Body: {
            return DataManagementExit();
        }
        Comment: {
            "Add termination statements here that require all libraries to be still alive.
            Return 1 if you allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence."
        }
    }
    Procedure MainTermination {
        Body: {
            return 1;
        }
        Comment: {
            "Add termination statements here that do not require all libraries to be still alive.
            Return 1 to allow the termination sequence to continue.
            Return 0 if you want to cancel the termination sequence.
            It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
        }
    }
}
